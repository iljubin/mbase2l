(window["webpackJsonpmbase2modules"] = window["webpackJsonpmbase2modules"] || []).push([[76],{

/***/ 13:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _libs_exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _libs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);
/* harmony import */ var _app_globals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(0);




/**
 * Translation form
 * 
 * @param {object} op
 * @param {object} op.$parent a jQuery $container for the form
 * @param {object} op.cm ComponentManager object instance
 * @param {object} op.refValues
 * @param {array|object} op.model values referenced by the attributes that are shown in select element; if array is passed as argument it gets converted to associative object of arrays based on 'id' property
 * @param {string} op.tableName name of the table to which the data is imported
 */

/* harmony default export */ __webpack_exports__["default"] = (async op => {    

    const [
        utils, 
        mutils,
        ComponentManager,
        Button,
        Accordion,
        TTomSelect,
        ButtonGroup,
        ModalDialog,
        batchesModule
    ] = await Promise.all([
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["utils"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["mutils"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["ComponentManager"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["Button"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["Accordion"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["TTomSelect"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["ButtonGroup"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["ModalDialog"](),
        __webpack_require__.e(/* import() */ 14).then(__webpack_require__.bind(null, 31))
    ]);

    const ColumnMapComponent = function(op = {}) {
        const $el = $('<div/>');
        const $badge = $(`<span class="badge">${op.label}</span>`);
        if (op.required === true) {
            $badge.addClass('required');
        }
        const btnGroup = new ButtonGroup.default(op.btnGroup.dataEntryOptions, {cm: op.cm, key: op.key, table: op.table, cmParent: op.cmParent, dataType: op.dataType});
        const $placeholder = this.$placeholder = $('<div/>');
        $el.append($badge);
        $el.append(btnGroup.$el());
        $el.append($placeholder);

        this.$el = () => $el;

        this.val = function (value) {
            return btnGroup.val(value);
        }
    }

    const CoordinateMapComponent = function (data) {
        const $el = $('<div/>');
        $el.css('display','flex');
        $el.css('flex-flow', 'row wrap');
        $el.css('border','solid 1px #9c9c9c');
        $el.css('width','100%');
        $el.css('padding','5px');
        
        const lat = this.lat = new TTomSelect.default({
            label: _app_globals__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].t`latitude`,
            data: data
        });

        const lon = this.lon = new TTomSelect.default({
            label: _app_globals__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].t`longitude`,
            data: data
        });

        const crs = this.crs = new TTomSelect.default({
            label: _app_globals__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].t`CRS`,
            onSelect: () => {
                if (this.crs) {
                    if (!this.crs.val()) {
                        this.crs.val(4326);
                    }
                }
            },
            data: [
                [3912, 'EPSG:3912 D48/GK'],
                [4326, 'EPSG:4326 WGS84/φλ – GPS'], 
                [3794, 'EPSG 3794 - D96/TM']
            ]});

        crs.val(4326);

        const $lat = lat.$el();
        const $lon = lon.$el();
        const $crs = crs.$el();

        $lat.css('width', '50%');
        $lon.css('width', '50%');
        $crs.css('width', '100%');

        $el.append(lat.$el());
        $el.append(lon.$el());
        $el.append(crs.$el());

        this.$el = () => $el;
    };

    CoordinateMapComponent.prototype.val = function(value) {
        if (value !== undefined) {
            this.lat.val(value.lat);
            this.lon.val(value.lon);
            this.crs.val(value.crs);
        }
        return {
            lat: this.lat.val(),
            lon: this.lon.val(),
            crs: this.crs.val()
        }
    }

    const {componentDefinitions, definitionAliases} = (await __webpack_require__.e(/* import() */ 3).then(__webpack_require__.bind(null, 14)));
    const importDefinitions = componentDefinitions(_libs_exports__WEBPACK_IMPORTED_MODULE_0__);
    const aliases = definitionAliases(utils.patterns);

    const {$parent, model, tableName} = op;

    /** if container is modal window it can have $body, $title and $footer parts */
    const $body = $parent.$body || $parent;
    const $title = $parent.$title;
    const $footer = $parent.$footer;

    const fup = await __webpack_require__.e(/* import() */ 46).then(__webpack_require__.bind(null, 18));
    let fileUploadCm;
    fileUploadCm = await fup.default({onSelect: onDataFileSelect, $parent: $body, subfolder: 'mbase2'});

    let pageSelector;

    pageSelector = new TTomSelect.default({
        label: _libs_utils__WEBPACK_IMPORTED_MODULE_1__["t"]`Select a page in the uploaded xlsx file`,
        onSelect: onSelectPage,
        configurationOverrides: {
            openOnFocus: false
        }

    });
    $body.append(pageSelector.$el());

    $body.append('<hr>');

    const $adiv = $('<div/>');

    let moduleKey = null;
    const applyExistingModal = new ModalDialog.default(
        {
            onClose: () => {
             
            },
            onShown: onApplyImportDefinitionsModalShown
    });

    const $a = $('<a/>',{
        href: '#'
    }).text(_libs_utils__WEBPACK_IMPORTED_MODULE_1__["t"]`Apply import definition from previous import`).on('click', function() {
        applyExistingModal.show();
    });

    $adiv.html($('<div/>',{
        style: 'margin-top: -10px; float: right;'
    }).html($a));
    $adiv.append('<br>');

    $adiv.hide();

    $body.append($adiv);

    /*accordion*/
    const acc = new Accordion.default({$parent: $body, closeOthers: false});

    Object.keys(model).map(key => {
        acc.addPanel(key);
    });

    acc.$el().hide();
    
    /*import button*/
    const importBtn = new Button.default({
        label:_libs_utils__WEBPACK_IMPORTED_MODULE_1__["t"]`Import`,
        onClick: onImport
    });

    $footer.append(importBtn.$el());

    importBtn.$el().hide(); //shown in mappings function
    
    /*DropDown*/
    /*const dropdown = new DropDown.default({
        label: t`Actions`,
        items: [
            {key: 'apply_template', label: t`Apply form template ...` },
            {key: 'save_template', label: t`Save form template ...` }
        ],
        onClick: onAction
    });

    $title.after(dropdown.$el());
    */

    const cms = {};
    const dataMapComponentDefinitions = {};

    function onAction() {
        
    }

    function onApplyImportDefinitionsModalShown() {
        batchesModule.default({
            $parent: applyExistingModal.$body,
            scrollY: '65vh',
            applyExisting: {
                module: moduleKey,
                onRowSelected: (dataObject) => {
                    
                    const dataDefinitions = JSON.parse(dataObject.data).dataDefinitions[moduleKey];
                    Object.keys(dataDefinitions.types).map(key=> cms[moduleKey] && cms[moduleKey].cmParent &&  cms[moduleKey].cmParent.get(key) && cms[moduleKey].cmParent.get(key).val(dataDefinitions.types[key]));
                    Object.keys(dataDefinitions.values).map(key=> cms[moduleKey] && cms[moduleKey].cm && cms[moduleKey].cm.get(key) && cms[moduleKey].cm.get(key).val(dataDefinitions.values[key]));
                    applyExistingModal.hide();
                    
                }
            }
        });
    }

    async function onDataFileSelect(e) {
        if (!fileUploadCm) return;
        const pages = await mutils.requestHelper(_app_globals__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].apiRoot + `/get_data_source_pages/${fileUploadCm.get('select').val()}`); 
        pageSelector.reinit(pages.map((p, inx) => [inx, p] ));
        pageSelector.val(0, false);
        console.log('--->',pageSelector.val())
    }

    async function onSelectPage(e) {
        console.log(e)
        if (!pageSelector) return;
        const columns = await mutils.requestHelper(_app_globals__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].apiRoot + `/get_data_source_page_columns/${fileUploadCm.get('select').val()}/${pageSelector.val()}`);
        mappings(columns.map((c,inx) => [inx, c]));
    }

    function mappings(cnames) {
        acc.$el().hide();
        if (!cnames || cnames.length === 0) return;
        $adiv.show();
        const defaultDataEntryOptions = {
            buttons: [
                {
                    key: 'column', 
                    label: _libs_utils__WEBPACK_IMPORTED_MODULE_1__["t"]`column`
                },
                {
                    key: 'fixed', 
                    label: _libs_utils__WEBPACK_IMPORTED_MODULE_1__["t"]`fixed`
                }
            ],
            onClick: onDataEntryOptionClicked
        };

        Object.keys(model).map(async table => {
            moduleKey = table;
            cms[table] = {
                cmParent: new ComponentManager.default(),
                cm: new ComponentManager.default()
            };
            dataMapComponentDefinitions[table] = {};
            
            const cm = cms[table].cm;
            const cmParent = cms[table].cmParent;

            const $parent = acc.getPanel(table).$body;
            $parent.empty();
            
            const _table = model[table];
            for (let ainx = 0; ainx < _table.length; ainx++) {
                const v = _table[ainx];
                if (v.read_only === true) continue;

                //if (v.key_data_type_id === 'table_reference') continue;

                const key = v.key_name_id;
                const dataType = v.key_data_type_id;
                let buttons = ['location_reference', 'location_data_json'].indexOf(dataType) !== -1 ? defaultDataEntryOptions.buttons.filter(btn=>btn.key==='column') : [...defaultDataEntryOptions.buttons];

                dataMapComponentDefinitions[table][key] = {};

                const dataEntryOptions = Object.assign({}, defaultDataEntryOptions);

                if (table === 'ct' && key === 'trap_station_name') {
                    buttons.push({
                        key: 'from_location',
                        label: _libs_utils__WEBPACK_IMPORTED_MODULE_1__["t"]`from location`
                    });
                }

                dataEntryOptions.buttons = buttons;
    
                const cmc = await cmParent.add({
                    key: key,
                    component: ColumnMapComponent,
                    options: {
                        btnGroup: {
                            dataEntryOptions: dataEntryOptions
                        },
                        label: v.t_name_id || key, 
                        cmParent: cmParent,
                        cm: cm,
                        key: key, 
                        table: table,
                        dataType: dataType,
                        required: v.required
                    },
                    $parent: $parent
                });

                if (table === 'ct' && key === 'trap_station_name') {

                    dataMapComponentDefinitions[table][key].from_location = {
                        key: key,
                        component: CoordinateMapComponent,
                        options: cnames,
                        $parent: cmc.$placeholder
                    }
                }

                dataMapComponentDefinitions[table][key].column = ['location_reference', 'location_data_json', '_location'].indexOf(dataType) !== -1 ? 
                {
                    key: key,
                    component: CoordinateMapComponent,
                    options: cnames,
                    $parent: cmc.$placeholder
                }
                :
                {
                    key: key,
                    component: TTomSelect.default,
                    data: {
                        values: cnames
                    },
                    $parent: cmc.$placeholder
                };

                cmc.$placeholder.css('margin-bottom','8px');

                cmc.val('column');

                await addComponentDefinition(v, 'fixed'); //without await it works "strangely" - i.e. asynchronously
                async function addComponentDefinition(variableAttributes, type, _cdef = null) {
                    const cdef = dataMapComponentDefinitions[table][key][type] = await mutils.getComponentDefinition(variableAttributes, _cdef || importDefinitions, aliases, op.refValues);
                    if (cdef.options && cdef.options.label) {
                        delete cdef.options.label;
                    }
                    cdef.$parent = cmc.$placeholder;
                    cdef.key = key;
                }
                
            }; //models loop
            
        });

        acc.$el().show();
        importBtn.$el().show();

    } //function mappings

    async function onImport() {
        const data = {};
        Object.keys(cms).map(table => {
            data[table] = {
                types: cms[table].cmParent.val(),
                values: cms[table].cm.val()
            }
        });
        
        const dsid = fileUploadCm.get('select').val();
        const page = pageSelector.val();
        const callbacks = await mutils.assignRequestCallbackToasters({});
        const res = await mutils.requestHelper(_app_globals__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].apiRoot + `/import/${dsid}/${page}/${tableName}/language/${_app_globals__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].language}`, 'POST', data, callbacks);

        if (res !== false) {
           showImportStatus(res);
        }
    }

    function showImportStatus(res) {
        const modal = new ModalDialog.default(
            {
                onClose: () => {
                    //if (res.length === 0) {
                        window.location.reload();
                    //}
                },
                onShown: () => {
                    
                    if (res.length === 0) {
                        modal.$body.html(_libs_utils__WEBPACK_IMPORTED_MODULE_1__["t"]`The import has finished successfully.`);
                    }
                    else {
                        
                        const values = [];
                        res.map(rowData => values.push({
                            data: rowData
                        }));

                        modal.$body.html(_libs_utils__WEBPACK_IMPORTED_MODULE_1__["t"]`The import has finished with some errors.`);
                        __webpack_require__.e(/* import() */ 15).then(__webpack_require__.bind(null, 35)).then(async importErrors => {
                            await importErrors.default({$parent: modal.$body, batchId: null, data: {
                                values: values
                            }});
                        })
                    }
                }
            }
        );

        modal.show();
    }

    function onDataEntryOptionClicked(data, btnKey) {
        data.cmParent.get(data.key).$placeholder.empty();
        data.cm.add(dataMapComponentDefinitions[data.table][data.key][btnKey], true);
    }
    
    
});

/***/ })

}]);
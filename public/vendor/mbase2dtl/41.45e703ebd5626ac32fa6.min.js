(window["webpackJsonpmbase2modules"] = window["webpackJsonpmbase2modules"] || []).push([[41],{

/***/ 6:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _app_globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _libs_exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);



let selectedSource = null;
let speciesField, dateUpdateField, lastUpdateDate;

//https://stackoverflow.com/questions/8493195/how-can-i-parse-a-csv-string-with-javascript-which-contains-comma-in-data
function csvToArray(text) {
    let p = '', row = [''], ret = [row], i = 0, r = 0, s = !0, l;
    for (l of text) {
        if ('"' === l) {
            if (s && l === p) row[i] += l;
            s = !s;
        } else if (',' === l && s) l = row[++i] = '';
        else if ('\n' === l && s) {
            if ('\r' === p) row[i] = row[i].slice(0, -1);
            row = ret[++r] = [l = '']; i = 0;
        } else row[i] += l;
        p = l;
    }
    return ret;
};

/* harmony default export */ __webpack_exports__["default"] = (async ($parent) => {
    const [
        utils, 
        mutils,
        ComponentManager,
        Button
    ] = await Promise.all([
        _libs_exports__WEBPACK_IMPORTED_MODULE_1__["utils"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_1__["mutils"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_1__["ComponentManager"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_1__["Button"]()
    ]);

    const $controls = $('<div/>');

    $parent.css('padding','10px').css('padding-top','80px');

    const $main = $('<div style="width:100%; margin-top:20px; max-height: 75vh; overflow-y:auto"></div>');

    let $output = $('<div/>');

    const cm = new ComponentManager.default();
    const cmp = {
        source: _libs_exports__WEBPACK_IMPORTED_MODULE_1__["select"]({
            label: 'Camelot source',
            onSelect: onCamelotSelected,
            url: _app_globals__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].apiRoot + '/mb2data/camelot_sources',
            process: d => [d.id, d.camelot_source_name],
            $parent: $controls
        })
    };

    await utils.loadComponents(cmp);

    await cm.add(cmp.source);

    await cm.add({
        key: 'button',
        component: Button.default,
        options: {
            label: 'Import data to mbase2',
            classes: 'btn-lg btn-primary',
            style: 'margin-top:10px',
            onClick: onImport
        },
        $parent: $controls
    });

    $parent.append($controls);
    $parent.append($main);

    //onImport();

    function onCamelotSelected(e) {
        const id = utils.select2value(e);
        if (!id) return;
        selectedSource = cm.getData('source').filter(d => id == d.id);
        if (selectedSource) selectedSource = selectedSource[0];
    }

    async function uploadImagesToMbase(data, onFinish) {

        const header = data[0];

        //data=[data[0], data[1]];
        
        const mediaNameInx = header.indexOf('Media Filename');

        $controls.LoadingOverlay("show");
        const $count = $('<span>0</span>');
        $output.append('Copying media data: ');
        $output.append($count);

        let mediaFileNames = {};
        for (let inx = 1; inx < data.length; inx++) {
            const fname = data[inx][mediaNameInx];
            mediaFileNames[fname] = true;
        }

        mediaFileNames = Object.keys(mediaFileNames);

        $output.append('/' + mediaFileNames.length);

        function updateCounter() {
            let cnt = parseInt($count.text());
            cnt++;
            $count.text(cnt);
            
            if (cnt === mediaFileNames.length) {
                $controls.LoadingOverlay("hide");
                $output.before("<div style='color:#006400'><br><b>Media data have been successfully copied to the Mbase server.</b></div>");
                $output.before("<div><br><b>Importing the data to the database...</b></div>");
                onFinish();
            }
        }
        
        for (let inx = 0; inx < mediaFileNames.length; inx++) {
       
           //https://developer.mozilla.org/en-US/docs/Web/API/Streams_API

           const fname = mediaFileNames[inx];
           
           const fullPath = selectedSource.url + '/media/photo/'+fname;
           const $o = $(`<div>Fetching ${fullPath} from Camelot ...</div>`); 
           $output.append($o);  

            // Fetch the original image
            fetch(fullPath)
            // Retrieve its body as ReadableStream
            .then(response => response.body)
            // Create a gray-scaled PNG stream out of the original
            //.then(rs => rs.pipeThrough(new TransformStream(new GrayscalePNGTransformer())))
            // Create a new response out of the stream
            .then(rs => new Response(rs))
            // Create an object URL for the response
            .then(response => response.blob())
            .then(blob => {
                //https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data
                var oReq = new XMLHttpRequest();
                $o.append('<div>OK. Pushing image to mbase2 server ...</div>');
                oReq.open("POST", _app_globals__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].apiRoot + '/camelot-image-upload/private/' + fname, true);
                oReq.onload = function (oEvent) {
                    //console.log('uploaded', oEvent)
                    updateCounter();
                    $o.append(`<div>Image ${fname} successfully uploaded.</div><hr>`);
                };

                oReq.send(blob);
            })

            //.then(blob => URL.createObjectURL(blob))
            // Update image
            //.then(url => image.src = url)
            .catch(error=> {
                console.error(error);
                $o.append(`<div style="color: red"><b>Error while uploading image</b> ${fname}: ${error}</div><hr>`);
                if (cnt === data.length) $controls.LoadingOverlay("hide");
            });
        }
    }

    async function onImport() {

        $main.empty();
        $output = $('<div/>');
        $main.html($output);

        if (!selectedSource) {
            alert('You have to select a Camelot data source');
            return;
        }

        selectedSource.url = utils.trimSlash(selectedSource.url);  //remove leading and trailing /

        speciesField = selectedSource.camelot_species_field || 'Species Common Name';
        dateUpdateField = selectedSource.camelot_updated_field || 'Sighting Updated';
        lastUpdateDate = (selectedSource.camelot_last_update && new Date(selectedSource.camelot_last_update)) || new Date('2000-01-01');

        /////////////////////////////////////////////////////////////////////////
        //const data = await mutils.requestHelper('http://localhost:8081/assets/camelot1.json','GET');        
        //uploadImagesToMbase(data);
        //const res1 = await mutils.requestHelper(globals.apiRoot+'/camelot/'+selectedSource.id, 'POST', data);
        //return;
        ///////////////////////////////////////////////////////////////////////

        $controls.LoadingOverlay("show");
        $output.append(`Fetching a full-export report from: ${selectedSource.url + '/report/full-export/download'}<br>`);
        
        const res = await utils.request(selectedSource.url + '/report/full-export/download', undefined, null, {onError: (r, e) => {
            $output.append('<div style="color: red"><b>Error:</b> '+e+'</div>');
        }}, undefined, 'text');

        if (res===false) {
            $controls.LoadingOverlay("hide");
            return;
        }

        $output.append(`Report file successfully fetched. Parsing the data ...<br>`);

        setTimeout(()=>{
            const data = parse(res);
            setTimeout(()=>{
                uploadImagesToMbase(data, () => {
                    mutils.requestHelper(_app_globals__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].apiRoot+'/camelot/'+selectedSource.id, 'POST', data,
                    {
                        onError: (r, e) => $output.before('<div style="color: red"><b>Error:</b> '+ (e.err || e) +'</div>')
                    }).then(res => {
                        $controls.LoadingOverlay("hide");
                        if (res.length === 0) {
                            $output.before(`<div style='color:#006400'><br><b>Data upload finished without reported errors.</b></div>`);
                        }
                        else {
                            res = res.map(row => JSON.parse(row));
                            $output.before(`<div style='color:red'><br><b>Data upload finished with the following errors:</b></div><pre>${JSON.stringify(res, null, 2)}</pre>`);
                        }
                    });
                });
            }, 100)
        }, 100);
        
    }

    function parse(res) {
        const lines = csvToArray(res);

        const header = lines[0];
        const speciesFieldInx = header.indexOf(speciesField);
        const dateUpdateFieldInx = header.indexOf(dateUpdateField);

        const ncols = header.length;

        const data = [header];

        for (let i=1; i < lines.length; i++) {
            let row = lines[i];
            if (row.length !== ncols) continue;
            if (row[speciesFieldInx].toLowerCase() === 'lynx lynx') {
                let rowDate = new Date(row[dateUpdateFieldInx]);
                if (rowDate > lastUpdateDate) {
                    data.push(row);
                }
            }
        }

        $output.append(`Data successfully parsed.<br>`);

        return data;
    }
});

/***/ }),

/***/ 7:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentManager", function() { return ComponentManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "record", function() { return record; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Select2", function() { return Select2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TTomSelect", function() { return TTomSelect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Select", function() { return Select; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mutils", function() { return mutils; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "utils", function() { return utils; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IconButton", function() { return IconButton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Accordion", function() { return Accordion; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Inputs", function() { return Inputs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Button", function() { return Button; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataTable", function() { return DataTable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModalDialog", function() { return ModalDialog; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Storage", function() { return Storage; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CheckBox", function() { return CheckBox; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Tabs", function() { return Tabs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImageArray", function() { return ImageArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DropzoneLoader", function() { return DropzoneLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FileUploadButton", function() { return FileUploadButton; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Media", function() { return Media; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Switch", function() { return Switch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ButtonGroup", function() { return ButtonGroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DropDown", function() { return DropDown; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LocationSelector", function() { return LocationSelector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MediaScroller", function() { return MediaScroller; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Map", function() { return Map; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sidebar", function() { return Sidebar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventsLegend", function() { return EventsLegend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateRangeInput", function() { return DateRangeInput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Alert", function() { return Alert; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InputMask", function() { return InputMask; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TreeView", function() { return TreeView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DateInputs", function() { return DateInputs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SimpleTable", function() { return SimpleTable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataFilter", function() { return DataFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataOrder", function() { return DataOrder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BootstrapToggle", function() { return BootstrapToggle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RadioButtonSelector", function() { return RadioButtonSelector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImageGallery", function() { return ImageGallery; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImageViewer", function() { return ImageViewer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimePicker", function() { return TimePicker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimeStampInput", function() { return TimeStampInput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectWithSpecify", function() { return SelectWithSpecify; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Mbase2Module", function() { return Mbase2Module; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "select", function() { return select; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "table", function() { return table; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "accordion", function() { return accordion; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "componentsOptions", function() { return componentsOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "button", function() { return button; });
/* harmony import */ var _app_globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);


const ComponentManager = () => __webpack_require__.e(/* import() | component-manager */ 8).then(__webpack_require__.bind(null, 33));
const record = () => __webpack_require__.e(/* import() */ 74).then(__webpack_require__.bind(null, 19));
const Select2 = () => __webpack_require__.e(/* import() | select2 */ 22).then(__webpack_require__.t.bind(null, 20, 7));
const TTomSelect = () => Promise.all(/* import() */[__webpack_require__.e(33), __webpack_require__.e(69)]).then(__webpack_require__.bind(null, 38));
const Select = () => __webpack_require__.e(/* import() | select */ 21).then(__webpack_require__.t.bind(null, 39, 7));
const mutils = () => __webpack_require__.e(/* import() */ 2).then(__webpack_require__.bind(null, 12));
const utils = () => __webpack_require__.e(/* import() */ 75).then(__webpack_require__.bind(null, 8));
const IconButton = () => __webpack_require__.e(/* import() */ 58).then(__webpack_require__.bind(null, 40));
const Accordion = () => __webpack_require__.e(/* import() | acc */ 17).then(__webpack_require__.bind(null, 21));
const Inputs = () => __webpack_require__.e(/* import() | inputs */ 19).then(__webpack_require__.bind(null, 22));
const Button = () => __webpack_require__.e(/* import() | btn */ 18).then(__webpack_require__.bind(null, 23));
const DataTable = () => Promise.all(/* import() */[__webpack_require__.e(23), __webpack_require__.e(34)]).then(__webpack_require__.bind(null, 41));
const ModalDialog = () => __webpack_require__.e(/* import() */ 63).then(__webpack_require__.t.bind(null, 17, 7));
const Storage = () => __webpack_require__.e(/* import() */ 67).then(__webpack_require__.bind(null, 42));
const CheckBox = () => __webpack_require__.e(/* import() */ 68).then(__webpack_require__.bind(null, 43));
const Tabs = () => __webpack_require__.e(/* import() */ 70).then(__webpack_require__.bind(null, 44));
const ImageArray = () => Promise.all(/* import() */[__webpack_require__.e(31), __webpack_require__.e(27)]).then(__webpack_require__.bind(null, 45));
const DropzoneLoader = () => Promise.all(/* import() */[__webpack_require__.e(2), __webpack_require__.e(35)]).then(__webpack_require__.bind(null, 46));
const FileUploadButton = () => __webpack_require__.e(/* import() */ 57).then(__webpack_require__.bind(null, 47));
const Media = () => __webpack_require__.e(/* import() */ 61).then(__webpack_require__.bind(null, 48));
const Switch = () => __webpack_require__.e(/* import() */ 37).then(__webpack_require__.bind(null, 49));
const ButtonGroup = () => __webpack_require__.e(/* import() */ 49).then(__webpack_require__.bind(null, 50));
const DropDown = () => __webpack_require__.e(/* import() */ 55).then(__webpack_require__.bind(null, 51));
const LocationSelector = () => __webpack_require__.e(/* import() */ 30).then(__webpack_require__.bind(null, 52));
const MediaScroller = () => __webpack_require__.e(/* import() */ 62).then(__webpack_require__.bind(null, 53));
const Map = () => __webpack_require__.e(/* import() */ 26).then(__webpack_require__.bind(null, 16));
const Sidebar = () => __webpack_require__.e(/* import() */ 36).then(__webpack_require__.bind(null, 54));
const EventsLegend = () => __webpack_require__.e(/* import() */ 56).then(__webpack_require__.bind(null, 55));
const DateRangeInput = () => Promise.all(/* import() */[__webpack_require__.e(11), __webpack_require__.e(54)]).then(__webpack_require__.bind(null, 56));
const Alert = () => __webpack_require__.e(/* import() */ 48).then(__webpack_require__.bind(null, 58));
const InputMask = () => Promise.all(/* import() */[__webpack_require__.e(44), __webpack_require__.e(60)]).then(__webpack_require__.bind(null, 59));
const TreeView = () => Promise.all(/* import() */[__webpack_require__.e(45), __webpack_require__.e(73)]).then(__webpack_require__.bind(null, 60));
const DateInputs = () => Promise.all(/* import() */[__webpack_require__.e(11), __webpack_require__.e(53)]).then(__webpack_require__.bind(null, 61));
const SimpleTable = () => __webpack_require__.e(/* import() */ 66).then(__webpack_require__.bind(null, 62));
const DataFilter = () => __webpack_require__.e(/* import() */ 50).then(__webpack_require__.bind(null, 63));
const DataOrder = () => __webpack_require__.e(/* import() */ 51).then(__webpack_require__.bind(null, 64));
const BootstrapToggle = () => __webpack_require__.e(/* import() */ 25).then(__webpack_require__.bind(null, 65));
const RadioButtonSelector = () => __webpack_require__.e(/* import() */ 64).then(__webpack_require__.bind(null, 66));
const ImageGallery = () => __webpack_require__.e(/* import() */ 39).then(__webpack_require__.bind(null, 67));
const ImageViewer = () => __webpack_require__.e(/* import() */ 59).then(__webpack_require__.bind(null, 68));
const TimePicker = () => Promise.all(/* import() */[__webpack_require__.e(32), __webpack_require__.e(71)]).then(__webpack_require__.bind(null, 69));
const TimeStampInput = () => __webpack_require__.e(/* import() */ 72).then(__webpack_require__.bind(null, 70));

const SelectWithSpecify = () => __webpack_require__.e(/* import() */ 65).then(__webpack_require__.bind(null, 71));

const Mbase2Module = () => __webpack_require__.e(/* import() */ 6).then(__webpack_require__.bind(null, 25));

///////////////////////////////////////Helper functions
/**
* Helper function for Select2 component - Heads up: call utils.loadComponents before use
* 
* @param {object} op
* @param {string} op.label
* @param {function} op.onSelect
* @param {string} [op.url] url of the select data to fetch
* @param {string} [op.tname] used if url is not defined - the tname constructed url is in this case: globals.apiRoot + `/${op.tname}/language/` + globals.language;
* @param {function} op.filter filter data fetched from the op.url before processing
* @param {DOM object} op.$parent
*/
const select = (op, deferredImport = true, component=Select2) => {
    const cdef = {
        options: {
            badge: op.label,
            onSelect: op.onSelect,
            onSelecting: op.onSelecting
        },
        data: {
            model: {
                key: 'id'
            },
            preprocess: (data, model) => {
                if (op.filter) {
                    data = data.filter(op.filter);
                }
                return data;
            },
            process: (data, model) => {
                
                const fun = op.process || (item => [item[model.key], item.t_id || item.key_id]);
                
                return data.map(fun);
            },
            refresh: (component, data) => {
                component.reinit(data);
            }
        },
        $parent: op.$parent
    };

    if (op.url || op.tname) {
        cdef.data.model.url = op.url || _app_globals__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].apiRoot + `/${op.tname}/language/` + _app_globals__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].language;
        cdef.data.request = async model => (await utils()).request(model.url, 'GET');
    }
    else if (op.data && op.data.values) {
        cdef.data.values = op.data.values;
    }

    if (deferredImport===true) {
        cdef.module = component;
    }

    return cdef;
}

const table = (op = {header:[], model:[]}) => {
    
    const cdef = {
        module: DataTable,
        options: {
            scroller: true,
            scrollX: true,
            deferRender:true,
            scrollY:'75vh',
            header: op.header
        },
        data: {
            model: {},
            process: op.processTableData || null,
            refresh: (component, data) => {
                component && component.setData(data);
            }
        },
        beforeComponentCreate: options => {
            const $div = $('<div/>');
            if (op.wrapperClass) $div.addClass(op.wrapperClass);
            op.$parent.append($div);
            options.$container = $div;
        }
    };

    if (op.onEdit) cdef.onEdit = (row, id) => {
        op.onEdit(row, id);
    }

    if (op.url) {
        cdef.data.model.url = op.url;
        cdef.request = async model => (await mutils()).requestHelper(model.url)
    }
    else if (op.data && op.data.values) {
        cdef.data.values = op.data.values;
    }

    return cdef;
};

const accordion =  op => {
    return {
        module: Accordion,
        options: componentsOptions.accordion(op.panels),
        $parent: op.$parent
    }
};

const componentsOptions = ({
    accordion: panels => ({
        closeOthers: false,
        panels: panels || []
    })
});

const button = op => {
    return {
        module: Button,
        options: {
            label: `Save`, 
            style:'float:right'
        }
    }
}

/***/ })

}]);
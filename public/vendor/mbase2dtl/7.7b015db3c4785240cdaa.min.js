(window["webpackJsonpmbase2modules"] = window["webpackJsonpmbase2modules"] || []).push([[7],{

/***/ 32:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _libs_exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _app_globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);



/**
 * @param {object} op options
 * @param {object} op.$parent
 * @param {string} op.tname
 */
/* harmony default export */ __webpack_exports__["default"] = (async op => {
    const {$parent} = op;

    const [
        ComponentManager,
        utils,
        mutils,
        Button,
        ModalDialog

    ] = await Promise.all([
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["ComponentManager"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["utils"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["mutils"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["Button"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["ModalDialog"]()
    ]);

    const t = utils.t;

    const targetTableUIDField = op.targetTableUIDField || '_uname';

    const sourceTable = op.sourceTable || '_users';   //primary table or view from which you can select users to be added to the secondary talbe
    const sourceTableSchema = op.sourceTableSchema ? '/' + op.sourceTableSchema : '';

    const btnAdd = new Button.default({
        label: (op.labels && op.labels['Add users']) || t`Add users`,
        onClick: onAddUsers,
        classes: 'btn-primary btn-lg'
    });

    const $header = mutils.moduleHeader(op.title, op.subtitle, btnAdd.$el());
    $parent.append($header);

    const $moduleUsersTableDiv = $('<div/>');
    $parent.append($moduleUsersTableDiv);

    const tname = op.targetTable;

    const moduleUserVariables = await mutils.requestHelper(_app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot + `/module_variables/language/${_app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].language}?:module_id:code_list_options/key=${tname}`);

    const tableRecordsOptions = await mutils.generalTableRecordsOptions($moduleUsersTableDiv, tname, moduleUserVariables);
    
    tableRecordsOptions.url = _app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot + '/mb2data/'+tname;
    tableRecordsOptions.disableEdit = false;
    tableRecordsOptions.skipId = true;
    tableRecordsOptions.deletable = true;
    tableRecordsOptions.btn_add_record = false;
    tableRecordsOptions.btn_batch_import = false;
    tableRecordsOptions.saveOptions = {
        rootUrl: _app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot + '/mb2data'
    }
    tableRecordsOptions.onEditRecord = (cm, row) => {
        const unameProps = cm.model.attributes.find(v => v.key_name_id === '_uname');
        unameProps._skipUpsert = true;
        cm.model.values._uname = cm.model.values.t__uname;
        unameProps.read_only = true;
        unameProps.key_data_type_id = 'text';
    }

    let accessTableComponent = null;
    tableRecordsOptions.onTableCreated = (table) => {   //get reference to the table when table is created
        accessTableComponent = table;
    }
 
    tableRecordsOptions.cm = new ComponentManager.default();

    tableRecordsOptions.tableOptions = {
        scrollY:'63vh',
        select: true,
        columnDefs: [
            {
                targets: -1,
                className: 'dt-body-left'
            },
            { width: 50, targets: 0 }
        ]
    };

    const recordsTable = await __webpack_require__.e(/* import() */ 1).then(__webpack_require__.bind(null, 10));
    recordsTable.default(tableRecordsOptions);

    let userVariables = null;
    let usersTableComponent = null;
 
    async function onAddUsers() {
        const modal = new ModalDialog.default();
        modal.show();

        userVariables = userVariables || await mutils.requestHelper(_app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot + `/module_variables/language/${_app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].language}?:module_id:code_list_options/key=${sourceTable}`);

        const tableRecordsOptions = {

            $parent: modal.$body,
            tableName: sourceTable,
            url: _app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot + sourceTableSchema + '/' + sourceTable,
            variablesAttributes: userVariables,
            btn_add_record: false,
            btn_batch_import: false,
            disableEdit: true,
            skipId: true,
            tableOptions: {
                /*columnDefs: [ {
                    orderable: false,
                    className: 'select-checkbox',
                    targets:   0
                } ],*/
                select: true,
                scrollY:'63vh'
            },
            onTableCreated: (table) => {
                usersTableComponent = table;
            }
        }
    
        const recordsTable = await __webpack_require__.e(/* import() */ 1).then(__webpack_require__.bind(null, 10));
        recordsTable.default(tableRecordsOptions);

        const btnDodaj = new Button.default({
            label: t`Add selected items`,
            onClick: addSelectedItems,
            classes: 'btn-primary'
        });

        modal.$footer.append(btnDodaj.$el());
    }

    async function addSelectedItems() {
        const data = usersTableComponent.table.rows( { selected: true } ).data();
        const existingUids = {};

        accessTableComponent.table.rows().data().map(row => {
            existingUids[row._uname] = true;
        });

        const toBeInserted = [];
        for (var i=0; i < data.count(); i++) {
            const uid = data[i]._uid;
            !existingUids[uid] && toBeInserted.push({[':'+targetTableUIDField]:uid});
        }
        
        if (toBeInserted.length > 0) {
            const callbacks = await mutils.assignRequestCallbackToasters({});
            const res = await mutils.requestHelper(_app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot + `/uac/${tname}`, 'POST', toBeInserted, callbacks);
        }

        recordsTable.default(tableRecordsOptions);
    }
});

/***/ })

}]);
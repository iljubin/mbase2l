(window["webpackJsonpmbase2modules"] = window["webpackJsonpmbase2modules"] || []).push([[84],{

/***/ 88:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _libs_exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _app_globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);



/* harmony default export */ __webpack_exports__["default"] = (async op => {

    const {$content, $header} = op;

    const [
        ComponentManager,
        utils,
        mutils,
        Button,
        Map,
        DataFilter
    ] = await Promise.all([
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["ComponentManager"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["utils"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["mutils"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["Button"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["Map"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["DataFilter"]()
    ]);

    await DataFilter.loadExports(_libs_exports__WEBPACK_IMPORTED_MODULE_0__);

    /*const attributes = [
        {
            key_name_id: globals.t`LUO`,
            key_data_type_id: 'table_reference',
            ref: 'view_luo'
        },
        {
            key_name_id: globals.t`OE`,
            key_data_type_id: 'table_reference',
            ref: 'oe'
        },
        {
            key_name_id: globals.t`LD`,
            key_data_type_id: 'table_reference',
            ref: 'view_lov'
        },
        {
            key_name_id: globals.t`Občina`,
            key_data_type_id: 'table_reference',
            ref: 'ob'
        }
    ];

    const arefvalues = await mutils.getRefCodeListValues(attributes);

    const dataFilter2 = new DataFilter.default({
        attributesDefinition: attributes,
        refValues: arefvalues
    });
    
    op.$content.append(dataFilter2.$el());

    dataFilter2.showFilterModal()

    window.df = dataFilter2;

    return;*/

    const t = utils.t;

    const isAdmin = _app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].user.roles.find(role => role === 'administrator' || role === 'mbase2_dmg_admin') ? true : false;

    const cm = new ComponentManager.default();

    const btnAddClaim = new Button.default({
        label:t`Nov zahtevek`,
        iconClass:'plus',
        type: 'btn-primary',
        classes: 'btn-lg',
        onClick: () => {
            const pathname = utils.rtrimSlash(window.location.pathname);
            utils.hrefClick(pathname+'/zahtevek');
        }
    });

    const btnExport = new Button.default({
        label:t`Izvoz podatkov`,
        iconClass:'download',
        type: 'btn-primary',
        classes: 'btn-lg',
        onClick: () => {
          utils.hrefClick(_app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot+'/export/dmg', null);
        }
    });

    const btnFilter = new Button.default({
        label:t`Filter`,
        iconClass:'filter',
        type:'btn-primary',
        classes:'btn-lg',
        onClick: () => {
            dataFilter();
        }
    })

    const $dataFilter = btnFilter.$el();

    const $headerButtonGroup = $('<div/>',{style: 'display: flex'});
    btnFilter.$el().find('button').prop('disabled', true);
    $headerButtonGroup.append(btnFilter.$el());
    $headerButtonGroup.append(btnExport.$el());
    $headerButtonGroup.append(btnAddClaim.$el());
    
    $header.html(mutils.moduleHeader(t`Pregled škodnih zahtevkov`,null,$headerButtonGroup));

    const $map = $('<div/>', {style:"height:calc(50vh - 142px); margin-bottom:22px"});
    $content.append($map);

    let dataTable = null;

    const map = new Map.default({
        $container: $map,
        onMarkerClicked: (marker, rowInx) => {
            if (dataTable) {
                const lines = [];
                dataTable.getRowCellsFormattedData(rowInx).map(o => {
                    lines.push(`<b>${o.title}:</b> ${o.value}`);
                });
                
                const popup = marker.getPopup();
                popup.setContent(lines.join('<br>'));


            }
        }
    });

    const columns = ['_claim_id','_expected_event','_deputy','_culprit','_affectees','_deputy_notes'];

    const result = await mutils.batchRequestHelper([
        `module_variables/language/${_app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].language}?:module_id:code_list_options/key=dmg`,
        `mb2data/dmg_agreements`
    ]);

    /*
    const filterOut = [
        "_claim_status",
        "_uid",
        "_deputy",
        "_affectees",
        ​"_others",
        ​"_location_data",
        ​"_deputy_notes",
        ​"_affectee_notes",
        "_affectee_claim_notes",
        ​"_genetic_samples",
        "_selected_culprit"
    ];*/

    const allVariables = [...result[0]];
    const variables = result[0].filter(v => columns.indexOf(v.key_name_id)!==-1);

    const allRefValues = await mutils.getRefCodeListValues(allVariables);
    
    const agreementsStatus = mutils.getAgreementsStatus(result[1]);

    if (!variables.find(v => v.key_name_id === '_uname')) {
        variables.push(mutils.createVariableDefinition('_uid', t`Uporabnik`, 'table_reference', '_users'));
    }

    variables.push(...[
        mutils.createVariableDefinition('date_record_created', t`Čas prvega vpisa`, 'timestamp'),
        mutils.createVariableDefinition('date_record_modified', t`Čas zadnje spremembe`, 'timestamp'),
    ]);

    variables.unshift(mutils.createVariableDefinition('_claim_status', t`STATUS`, 'integer'));

    //move _deputy_notes to the end of table
    const deputyNotesIndex = variables.findIndex(v => v.key_name_id === '_deputy_notes');
    variables.push(variables.splice(deputyNotesIndex, 1)[0]);

    const coordinates = [];
    
    const tableRecordsOptions = await mutils.generalTableRecordsOptions($content, 'dmg', variables);
    tableRecordsOptions.cm = cm;
    tableRecordsOptions.url = _app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot + `/mb2data/dmg`;
    tableRecordsOptions.skipId = true;
    tableRecordsOptions.deletable = true; //isAdmin ? true : false;

    tableRecordsOptions.rowEditOptions = row => [true, tableRecordsOptions.deletable && row.__deletable]
    
    const pathname = utils.rtrimSlash(window.location.pathname);
    
    tableRecordsOptions.externalEditRecord = (row) => {
        utils.hrefClick(pathname+'/zahtevek?fid='+row.id);
    }

    tableRecordsOptions.tableOptions = {
        scrollY: 'calc(45vh - 142px)',
        exportButtons: true
    }

    tableRecordsOptions.btn_add_record = false;
    tableRecordsOptions.btn_batch_import = false;
    tableRecordsOptions.preprocessTableData = (data, model) => {
        
        mutils.convertJsonToObjects(data, variables);

        data.map((r,inx) => {
            const d = r;
            
            if (d._claim_status == 1) {
                if (agreementsStatus[d.id] === d._affectees.length) {
                    d._claim_status = `<span class="label label-info">ZAKLJUČEN 2</span>`;
                }
                else {
                    d._claim_status = `<span class="label label-danger">ZAKLJUČEN 1</span>`;
                }
            }
            else {
                d.__deletable = isAdmin || _app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].user.uid == d._uid;
                d._claim_status = `<span class="label label-default">NEZAKLJUČEN</span>`;
            }

            if (d._expected_event==1) {
                d._expected_event = t`DA`;
            }
            else if (d._expected_event==2) {
                d._expected_event = t`NE`;
            }

            
            columns.map(c => r[c] = d[c] === undefined ? null : d[c]);

            d.date_record_created = d.date_record_created && moment.utc(new Date(d.date_record_created+'Z')).format('YYYY-MM-DD HH:mm:ss');
            d.date_record_modified = d.date_record_modified && moment.utc(new Date(d.date_record_modified+'Z')).format('YYYY-MM-DD HH:mm:ss');

            if (d._location_data) d._location_data = JSON.parse(d._location_data);

            if (d._location_data && d._location_data.lat && d._location_data.lon) {
                coordinates.push({
                    data: inx,
                    c: [d._location_data.lat, d._location_data.lon]
                })
            }
        });

        return data;
    }

    tableRecordsOptions.onTableCreated = (table) => {
        dataTable = table;
        window.tbl = table
        map.addLayer(coordinates);
    }

    const recordsTable = await __webpack_require__.e(/* import() */ 1).then(__webpack_require__.bind(null, 10));
    recordsTable.default(tableRecordsOptions);

    function dataFilter() {
        new DataFilter.default({
            attributesDefinition: allVariables,
            refValues: allRefValues,
            $filter: $dataFilter,
            apply: {
                button:{label: t`Execute query`},
                callback: () => executeQuery()
            }
        });
    }

    function executeQuery() {

    }
});

/***/ })

}]);
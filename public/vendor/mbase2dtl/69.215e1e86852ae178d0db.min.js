(window["webpackJsonpmbase2modules"] = window["webpackJsonpmbase2modules"] || []).push([[69],{

/***/ 38:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tom_select__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(91);
/* harmony import */ var tom_select__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(tom_select__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var tom_select_dist_css_tom_select_min_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(92);
/* harmony import */ var tom_select_dist_css_tom_select_min_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(tom_select_dist_css_tom_select_min_css__WEBPACK_IMPORTED_MODULE_1__);



const TTomSelect = function (op){
	var data = op.data || [];
	const $el = $('<div/>');
	this.$el = () => $el;

	const badge = op.badge || op.label;
	const required = op.required ? 'required' : '';

	let $badge;
	
	if (badge){
		$badge = $(`<span class="label label-primary mbase2-label ${required}">`+badge+'</span>');
		$el.append($badge);
	}

	if (data[0] && Array.isArray(data[0])) {
		data = data.map(d => ({value: d[0], text: d[1]}));
	}
	else if (data[0] && typeof data[0] === 'object' && data[0].text !== undefined) {
		;
	}
	else {
		data = data.map((d,inx) => ({value: inx, text: d}));
	}
	
	if (op.multiple===true){
		$select.attr('multiple',"multiple");
	}

	const $input = $('<input/>');
	
	$el.append($input);

	this.tselect = new tom_select__WEBPACK_IMPORTED_MODULE_0__($input[0],Object.assign({
		options:data,
		plugins: ['dropdown_input'],
		maxItems: op.multiple === true ? null : 1
	}, op.configurationOverrides || {}));

	this.tselect.on('change', value => {
		if (!value) return;
		op.onSelect && op.onSelect(value, this.added);
		this.onSelectHook && this.onSelectHook(value, this.added);
		this.added = false;
	})

	this.tselect.on('option_add', () => {
		this.added = true;
	});
}

TTomSelect.prototype.val = function (a,silent=true) {
	if (a !== undefined) {
		this.tselect.setValue(a, silent);
	}

	return this.tselect.getValue();
}

TTomSelect.prototype.reinit=function(data,textf){
	this.tselect.clearOptions();
	if (data.length===0) return false;
	
	if (textf===undefined) textf='text';
	var valf='id';
	if (data[0][valf]===undefined) valf=textf;
	
	const options = [];

	if (data[0][valf] && data[0][textf]){
		$.each(data,function(key,op){
			options.push({value: op[valf], text: op[textf]});
		});
	}
	else if (Array.isArray(data[0])) {
		data.map(d => {
			options.push({value: d[0], text: d[1]});
		});
	}
	else{
		$.each(data,function(key,op){
			options.push({value: op, text: op});
		});
	}

	console.log('options', options)
	
	this.tselect.addOptions(options);
	this.tselect.refreshOptions();
	

	return true;
};

/* harmony default export */ __webpack_exports__["default"] = (TTomSelect);

/***/ })

}]);
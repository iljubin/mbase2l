(window["webpackJsonpmbase2modules"] = window["webpackJsonpmbase2modules"] || []).push([[95],{

/***/ 74:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _app_globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var _libs_exports__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);
/**
 * mbase2 settings: modules
 */



/* harmony default export */ __webpack_exports__["default"] = (async op => {

    const {$parent, module} = op;

    const [
        ComponentManager,
        mutils,
        utils
    ] = await Promise.all([
        _libs_exports__WEBPACK_IMPORTED_MODULE_1__["ComponentManager"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_1__["mutils"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_1__["utils"]()
    ]);

    const t = utils.t;

    const components = {
        modules: _libs_exports__WEBPACK_IMPORTED_MODULE_1__["select"]({
            label: t`Modules`,
            onSelect: onSelectModuleName,
            tname: 'modules',
            $parent: $parent
        }),
        acc: _libs_exports__WEBPACK_IMPORTED_MODULE_1__["accordion"]({
            panels: [
                t`Module properties`,
                t`Variables`
            ],
            $parent: $parent
        })
    };

    const cm = new ComponentManager.default();

    await utils.loadComponents(components);
    const modules = await cm.add(components.modules);

    let references;
    ///////////////////////////////////////////////////////////////////////////////////////////
    /** module variables */
    const definitions = (await __webpack_require__.e(/* import() */ 13).then(__webpack_require__.bind(null, 72))).default(_libs_exports__WEBPACK_IMPORTED_MODULE_1__, _app_globals__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]);
    const moduleVariablesAttributes = await definitions.module_variables({onDataTypeSelected: onDataTypeSelected});
    
    const codes = await mutils.getRefCodeListValues(moduleVariablesAttributes,['module_variables']);

    //add translation - only needed beacause these variable properties are not fetched from table
    mutils.translateKey('key_name_id', 't_name_id', moduleVariablesAttributes, 
        codes.codeLists.find(cl => cl.key === 'module_variables').id, codes.codeListValues);

    const codeListValues = utils.arrayToObject(codes.codeListValues, 'id');
    const tableReferences = utils.arrayToObject(codes.tableReferences, 'id');

    /////////////////////////////////////////////////////////////

    const moduleVariablesCm = new ComponentManager.default();

    if (module) {
        const data = cm.getData('modules');
        const m = data.find(d => d.key_id == module);
        if (m) {
            modules.val(m.id);
        }
    }

    async function onSelectModuleName(e) {
        const moduleId = utils.select2value(e)
        if (!moduleId) return;
        
        await cm.add(components.acc);

        const selectedModuleData = cm.getData('modules').find(d => d.id == moduleId);

        ///////////////////////////////////////////////////////////////////////
         /**selected module properties */
        
        cm.model.attributes = [
            {
                key_data_type_id: 'json',
                key_name_id: 'properties',
                _op: {
                    attributes: [
                        {
                            label: t`Grid size`, 
                            key: 'grid_size', 
                            required: true, 
                            pattern: utils.patterns.non_zero_integer,
                            help: t`Grid size in meters`
                        },
                        {
                            label: t`Color`, 
                            key: 'color', 
                            required: true, 
                            type: 'color',
                            help: t`Select a color of the grid cell`
                        }
                    ]
                }
            }
        ];
        cm.model.values = {
            id: modules.val(),
            properties: utils.jsonParse(selectedModuleData.properties)
        }
        cm.model.tableName = cm.model.dataComponentKey = 'modules';

        const record = await _libs_exports__WEBPACK_IMPORTED_MODULE_1__["record"]();
        record.default({
            $parent: cm.get('acc').panels[0].$body,
            cm: cm,
            saveOptions: {
                upsertDataFunction: null
            },
            replaceComponents: false
        });

        const recordsTable = await __webpack_require__.e(/* import() */ 1).then(__webpack_require__.bind(null, 10));
        const tableRecordsOptions = await mutils.moduleVariablesTableRecordsOptions(cm.get('acc').panels[1].$body, moduleId, moduleVariablesAttributes, codeListValues, tableReferences);
        tableRecordsOptions.onEditRecord = onEditRecord;
        tableRecordsOptions.cm = moduleVariablesCm;
        recordsTable.default(tableRecordsOptions);
    }

    /**
     * this function executes before modal dialog for record editing is shown
     */
    let recordCm;
    function onEditRecord(cm) {
        recordCm = cm;
        onDataTypeSelected();
    }

    async function onDataTypeSelected(e) {
        if (!recordCm) return;
        const dataTypeSelect = recordCm.get('data_type_id');
        if (!dataTypeSelect) return;
        let dataType = dataTypeSelect.text();
        if (!dataType) return;
        const rkeys = ['code_list_reference', 'table_reference'];
        const cref = recordCm.get('ref');

        if (rkeys.indexOf(dataType)!==-1) {
            references = await mutils.getReferences(references);
            console.log('references', references)
            cref.$el().show();
            cref.reinit(references[dataType]);
        }
        else {
            cref.$el().hide();
            cref.val(null);
        }
    }
    async function userAccess(moduleKeyId) {
        const uac = await __webpack_require__.e(/* import() */ 7).then(__webpack_require__.bind(null, 32));
        const $content = cm.get('acc').panels[3].$body;
        $content.empty();

        uac.default({
            $parent: $content,
            targetTable: 'dmg_deputies'
        });
    }
});

/***/ })

}]);
(window["webpackJsonpmbase2modules"] = window["webpackJsonpmbase2modules"] || []).push([[88],{

/***/ 85:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _libs_exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _app_globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);



/* harmony default export */ __webpack_exports__["default"] = (async op => {
    const [
        utils,
        mutils,
        Mbase2ModuleIndex,
        ModalDialog
    ] = await Promise.all([
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["utils"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["mutils"](),
        __webpack_require__.e(/* import() */ 5).then(__webpack_require__.bind(null, 34)),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["ModalDialog"]()
    ]);

    const t = utils.t;

    let moduleIndex;

    const singleRecordPath = '/sample';

    const moduleIndexOptions = Object.assign({
        buttons: [
            {
                label: t`Batch import`,
                iconClass:'file',
                onClick: async () => {
                    mutils.batchImport({
                        batch: await __webpack_require__.e(/* import() */ 10).then(__webpack_require__.bind(null, 13)),
                        ModalDialog: ModalDialog
                    }, 'gensam' , t`Batch import`);
                }
            },
            {
                label:t`Export`,
                iconClass:'download',
                type: 'btn-primary',
                classes: 'btn-lg',
                onClick: () => {
                  utils.hrefClick(_app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot+'/export/gensam', null);
                }
            },
            {
                key: 'new',
                label: t`New sample`,
                iconClass: 'plus',
                path: singleRecordPath
            }
            /*{
                label:t`Filter`,
                iconClass:'filter',
                type:'btn-primary',
                classes:'btn-lg',
                onClick: () => {
                    //dataFilter();
                }
            }*/
        ],
        recordTimeStamps: true,
        moduleKey:'gensam',
        title: t`Genetic samples`,
        viewName:'gensam_vw',
        unameField: '_sample_entry_clerk_uid',
        skipDefaultVariables: false,
        skipVariables: ['_sighting_time', '_uname', '_animals_number', '_juvenile_number', '_batch_id', '_gps_colar_id','_prey_species','_marking_object', '_genetics', '_location_reference','_location', '_location_data'],
        //hideColumnsFromTable: ['_photos'],
        singleRecordPath: singleRecordPath,
        preprocessTableData: preprocessTableData,
        additionalVariables: (variables) => {
            const v = mutils.createVariableDefinition('__status', t`Status`, 'text');
            v.visible_in_table = true;
            v.visible = true;
            return [v, ...variables];
        }
    }, op);

    moduleIndex = new Mbase2ModuleIndex.default(moduleIndexOptions);
    await moduleIndex.init();

    function preprocessTableData(data) {
        data.map(row=>{
            row.__status = row.completed ? `<span class="label label-success">${(t`COMPLETED`)}</span>` : `<span class="label label-danger">${(t`UNCOMPLETED`)}</span>`;
        });
    }
});

/***/ })

}]);
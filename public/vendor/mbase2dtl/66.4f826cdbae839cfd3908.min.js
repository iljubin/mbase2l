(window["webpackJsonpmbase2modules"] = window["webpackJsonpmbase2modules"] || []).push([[66],{

/***/ 62:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * 
 * @param {object} op 
 * @param {object} op.attributes
 * @param {object} op.codeListValues
 * @param {object} op.tableReferences
 * @param {string} op.language
 */
function SimpleTable(op = {}) {

    const $table = $(`<table class="table table-striped table-bordered"/>`);
    const $thead = $('<thead/>');

    this.op = op;
    
    this.$el = () => $table;

    this.attributes = op.attributes;

    this.codeListValues = op.codeListValues;
    this.tableReferences = op.tableReferences;

    this.language = op.language;

    const $tr = $('<tr/>');
    op.attributes.map(a => {
        $tr.append(`<th>${a.t_name_id || a.key_name_id}</th>`);
    });

    $thead.append($tr);
    $table.append($thead);

    this.$tbody = $('<tbody/>');
    
    $table.append(this.$tbody);

    this.data = {};
}

SimpleTable.prototype.add = function(row) {
    const $tr = $('<tr/>');

    if (!Array.isArray(row)) {
        const _row = [];
        this.attributes.map(a => {
            _row.push(row[a.key_name_id]);
        });
        row = _row;
    }

    row.map((c,i) => {
        if (c && ['code_list_reference', 'table_reference'].indexOf(this.attributes[i].key_data_type_id) !== -1 ) {
            const options = this.attributes[i].key_data_type_id === 'code_list_reference' ? this.codeListValues : this.tableReferences;
            
            if (this.attributes[i].key_data_type_id === 'table_reference') {
                c = c + '_' + this.attributes[i].ref;
            }

            c = options[c] || options['__value_'+c];    //if the same column is used for code list values and raw values I store raw values as code_list_item with id = '__value_'+{value}
            c = (c.translations && c.translations[this.language]) || c.key;
        }
        $tr.append(`<td>${c}</td>`);
    });

    const keys = Object.keys(this.data);
    const inx = keys.length === 0 ? 0 : Math.max(...keys.map(key => parseInt(key))) + 1;

    this.data[inx] = row;

    const $trash = $('<span style="cursor: pointer" class="pficon pficon-delete"></span>');
    $trash.on('click', () => {
        $tr.remove();
        delete this.data[inx];
    });

    const $td = $('<td/>');
    $td.append($trash);
    $tr.append($td);

    this.$tbody.append($tr);

    this.op.onRowAppended && this.op.onRowAppended(row);
}

SimpleTable.prototype.clear = function() {
    this.$tbody.empty();
    this.data = {};
}

SimpleTable.prototype.val = function(data) {
    if (data !== undefined) {
        this.clear();
        data.map(row=>this.add(row));
    }

    return Object.values(this.data);
}


/* harmony default export */ __webpack_exports__["default"] = (SimpleTable);

/***/ })

}]);
(window["webpackJsonpmbase2modules"] = window["webpackJsonpmbase2modules"] || []).push([[14],{

/***/ 31:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _libs_exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _app_globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);
/**
 * mbase2 settings: modules
 * op.applyExisting: loads reduced table with only specific module uploads
 */




/* harmony default export */ __webpack_exports__["default"] = (async op => {

    const {$parent, $header} = op;

    const [
        ComponentManager,
        utils,
        mutils,
        ModalDialog,
        DropDown
    ] = await Promise.all([
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["ComponentManager"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["utils"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["mutils"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["ModalDialog"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["DropDown"]()
    ]);

    const moduleNameTranslations = await mutils.getTranslationsForList('modules');

    if ($header) {

        const $headerButtonGroup = $('<div/>',{style: 'display: flex'});
        
        $header.html(mutils.moduleHeader(_app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].t`Batch imports`,null,$headerButtonGroup));

        const allModulesKeys = Object.keys(moduleNameTranslations).filter(key => ['__default_module', 'mbase2'].indexOf(key)===-1);

        let dropDownItems = [];

        if (_app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].user.roles.indexOf('administrator') !==-1) {
            allModulesKeys.map(key => dropDownItems.push({
                key: key,
                label: moduleNameTranslations[key]
            }))
        }
        else {
            const modulesWithEditorOrAdminRole = [];
            _app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].user.roles.map(role => {
                allModulesKeys.map(key => {
                    if ([`mbase2_${key}_admin`,`mbase2_${key}_editor`].indexOf(role)!==-1) {
                        modulesWithEditorOrAdminRole.push(key);
                    }
                });
            });

            modulesWithEditorOrAdminRole.map(key => dropDownItems.push({
                key: key,
                label: moduleNameTranslations[key]
            }));
        }

        const dropDown = new DropDown.default({
            items: dropDownItems,
            label: _app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].t`Select a module for batch import`,
            onClick: async ({key}) => {

                mutils.batchImport({
                    batch: await __webpack_require__.e(/* import() */ 10).then(__webpack_require__.bind(null, 13)),
                    ModalDialog: ModalDialog
                }, key, moduleNameTranslations[key]);
            }
        });

        $headerButtonGroup.append(dropDown.$el());
    }
        
///////////////////////////////////////////////////////////////////////////////////////////
        /**
         * double underscore before the key_name_id to prevent mixing with column names obtained from table (if variableAttribute key_name_id is not present in table it gets added to data array)
         */
    
    let variablesAttributes = [
        {
            key_data_type_id: 'text',
            key_name_id: '__module',
            t_name_id: 'module',
        },
        {
            key_data_type_id: 'text',
            key_name_id: '__username',
            t_name_id: 'username',
        },
        {
            key_data_type_id: 'date',
            key_name_id: '__date',
            t_name_id: 'date',
        },
        {
            key_data_type_id: 'text',
            key_name_id: '__source',
            t_name_id: 'source',
        },
        {
            key_data_type_id: 'text',
            key_name_id: '__status',
            t_name_id: '# of imported rows / # all rows'
        },
        
    ];

    if (op.applyExisting) {
        variablesAttributes = variablesAttributes.filter(a => ['__status','__source'].indexOf(a.key_name_id)===-1);
    }
    
    const tableRecordsOptions = {
        $parent: $parent,
        tableName: '_import_batches',
        url: _app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot + '/_import_batches',
        urlForDelete: _app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot + '/drop-batch-data',
        select: [],
        skipAttributesFromTable: ['data'],
        variablesAttributes: variablesAttributes,
        disableEdit: true,
        btn_add_record: false,
        btn_batch_import: false,
        deletable: op.applyExisting ? false : true,
        selectable: op.applyExisting ? true : false,
        onRowSelected: op.applyExisting ? op.applyExisting.onRowSelected : () => {},
        preprocessTableData: (data, model) => {

            const filteredData = [];    //only used when applyExisting is set

            for (const d of data) {
                const idata = JSON.parse(d.data) || {};

                const dataDefinitions = idata.dataDefinitions;
                if (dataDefinitions) {
                    const module = Object.keys(dataDefinitions)[0];
                    if (module) {

                        if (op.applyExisting && op.applyExisting.module!==module) continue;

                        d.__module = moduleNameTranslations[module] || module;
                    }
                }

                if (idata.camelotId) {
                    d.__source = 'camelot: '+idata.camelotId;
                }
                else {
                    d.__source = idata.fileName + ', ' + idata.sheetInx;
                }

                d.__status = idata.insertedRows + "/" + idata.crows;

                if (idata.insertedRows !== idata.crows) {
                    d.__status = `<a href="#" id="${d.id}" class="import-error" style="color:red">${d.__status}</a>`;
                }

                d.__date = d.date_record_created;
                d.__username = d.user_name;

                filteredData.push(d);
            }
            
            return op.applyExisting ? filteredData : data;
        },
        onTableCreated: table=>{
            table.$el().on('click','.import-error', async function() {
                const batchId = $(this).attr('id');
                const importErrors = await __webpack_require__.e(/* import() */ 15).then(__webpack_require__.bind(null, 35));
                const dlg = new ModalDialog.default({
                    onShown: () => {
                        importErrors.default({$parent: dlg.$body, batchId: batchId});
                    }
                });
                
                dlg.show();
            })
        }

    }

    if (op.scrollY) {
        tableRecordsOptions.tableOptions = {
            scrollY: op.scrollY
        }
    }

    const recordsTable = await __webpack_require__.e(/* import() */ 1).then(__webpack_require__.bind(null, 10));
    recordsTable.default(tableRecordsOptions) 
});

/***/ })

}]);
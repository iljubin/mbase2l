(window["webpackJsonpmbase2modules"] = window["webpackJsonpmbase2modules"] || []).push([[16],{

/***/ 123:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "personText", function() { return personText; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$containers", function() { return $containers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initSections", function() { return initSections; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bookmark", function() { return bookmark; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "personVariablesDefinition", function() { return personVariablesDefinition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "personsComponents", function() { return personsComponents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "personUpsert", function() { return personUpsert; });
/* harmony import */ var _libs_exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _app_globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);
/* harmony import */ var jsvat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(127);
/* harmony import */ var iban__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(124);
/* harmony import */ var iban__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(iban__WEBPACK_IMPORTED_MODULE_3__);





let ComponentManager, ModalDialog, mutils, utils;

/* harmony default export */ __webpack_exports__["default"] = (async (exports) => {
    [
        ComponentManager, 
        ModalDialog,
        mutils,
        utils
    ] = await Promise.all([
        exports.ComponentManager(),
        exports.ModalDialog(),
        exports.mutils(),
        exports.utils()
    ]);
});

const personText = d => `${d._full_name}, ${d._street} ${d._house_number}, ${parseInt(d._post) === -1 ? d._foreign_post : d._post}`;

const $containers = $parent => {
    const $left =  $('<div style="float: left; height:100%;  width:20%; max-height: calc(100vh - 187px); overflow: auto"/>');
    const $right = $('<div style="float: right; height:100%; width:80%; max-height: calc(100vh - 187px); overflow: auto; border-left: solid black 1px; padding:10px"/>');
    $parent.append($left);
    $parent.append($right);

    return {
        $left: $left,
        $right: $right
    }
}

const initSections = (sections, bookmarks, cm, $left) => {
    for (let section of sections) {
        const required = section.required;

        if (section.parent) {
            bookmarks[section.key] = {
                parent: section.parent,
                required: required
            };
            continue;
        }

        const title = section.title;
        
        const $bm = bookmark({
            title: title, 
            required: required
        }); 

        $bm.on('click', () => {
            const panel = cm.get('acc_'+section.key);
            if (!panel) return;
            
            const lref = cm.get('_location_reference');
            lref && lref.$el().hide(); /*without hidding fixed height element
            the top margin of container div was ignored after scrolling (any) element into the view
            */
            panel.$el()[0].scrollIntoView();
            lref && lref.$el().show();
        })
        
        bookmarks[section.key] = {
            $bm: $bm,
            required: required
        };

        $left.append($bm);
    }
}

const bookmark = (op) => {
    return $(`<div class="bookmark bookmark-${op.required ? 'required' : 'optional' }">
        <h5>${op.title}${op.required === false ? '' : '*'}</h5>
    </div>`);
}

const personVariablesDefinition = async (moduleTableName) => {
    const personVariables = mutils.sortVariables(await mutils.requestHelper(_app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot + `/module_variables/language/${_app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].language}?:module_id:code_list_options/key=${moduleTableName}`));
    const refValues = await mutils.getRefCodeListValues(personVariables);

    return {
        personVariables: personVariables,
        refValues: refValues
    }
}

/**
 * 
 * @param {jquery DOM} op.$container
 * @param {object} op.t translations
 * @param {string} op.selectDataTable 
 * @param {string} op.moduleTableName
 */

async function personsComponents(cm, titleKey, _op={}) {

    const op = Object.assign({
        t: {}
    },_op);

    const utils = await _libs_exports__WEBPACK_IMPORTED_MODULE_0__["utils"]();

    const t = utils.t;

    const {personVariables, refValues} = await personVariablesDefinition(op.moduleTableName);
    
    const cdef = _libs_exports__WEBPACK_IMPORTED_MODULE_0__["select"]({
        url: _app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot + '/mb2data/'+op.selectDataTable+'?json_flags=0',
        $parent: op.$container,
        process: d => [d.id, personText(d)]
    }, false);

    const recordEditorOptions = personsRecordEditorOptions(titleKey, personVariables);

    const Select2 = await _libs_exports__WEBPACK_IMPORTED_MODULE_0__["Select2"]();

    cdef.key = titleKey.key;
    cdef.component = Select2.default;
    cdef.options.multiple = true;
    cdef.options.placeholder = op.t['Dodaj oškodovance iz seznama'] || t`Dodaj oškodovance iz seznama`;
    
    cdef.options.tags = true;
    cdef.options.newOptionText = op.t['<b>(Nov vnos: naziv oškodovanca)</b>'] || t`<b>(Nov vnos: naziv oškodovanca)</b>`;
    cdef.options.onSelect = e => {
        if (!e) return;
        if (!e.params) return;
        if (!e.params.data.newOption) return;
        personUpsert(op.moduleTableName, false, null, Object.assign(recordEditorOptions, e.params.data));
    }
    
    cdef.options.templateSelection = function (data) {
        var $a = $('<a href="#"></a>');
        $a.text(data.text);
        data.$a = $a;
        $a.on('click', () => {
            personUpsert(op.moduleTableName, true, data.id, recordEditorOptions);
            return false;
        })
        return $a;
    };

    await cm.add(cdef);

    function personsRecordEditorOptions(titleKey, personVariables) {
        return {

            onShown: (cmr) => {
                cmr.get('_full_name').$el().find('input:first').focus().select();
            },

            onClose: (update, data, cm) => {
                if (!update && data.newOption) {
                    const cmp = cm.get(titleKey.key);
                    const values = cmp.val();
                    cmp.val(values.filter(v => v != data.text));
                }
            },

            refValues: refValues,
            cm: cm,
            titleKey: titleKey,
            personVariables: personVariables,

            onSuccessfullySaved: (_cm, values, personVariables, refValues, update, data, cm) => {
                const listId = mutils.getReferenceTableListId('poste', personVariables);
                if (listId) {
                    const option = refValues.tableReferences.find(item => item.list_id == listId && item.id == values._post_number)
                    if (option) {
                        values._post = option.key;
                        const oskodovanciComponent = cm.get(titleKey.key);
                        let selectedValues = oskodovanciComponent.val();
                        if (!selectedValues) selectedValues = [];
                        selectedValues = selectedValues.filter(v => v != data.text);
                        const _data = cm.getData(titleKey.key);
                        if (update === false) {
                            _data.push(values);
                        }
                        else {
                            const inx = _data.findIndex(d => d.id == values.id);
                            if (inx === -1) return;
                            _data[inx] = values;
                        }
                        cm.refresh(titleKey.key);
                        selectedValues.push(values.id);
                        oskodovanciComponent.val(selectedValues);
                    }
                }
            }
        }
    }
}

async function personUpsert(moduleTableName, update = false, oid = null, data = {}) {
    const cm = data.cm;
    const titleKey = data.titleKey;
    const cmr = new ComponentManager.default();

    const utils = await _libs_exports__WEBPACK_IMPORTED_MODULE_0__["utils"]();

    const t = utils.t;

    if (update === true) {
        if (!oid) return;
        cmr.model.values = cm.getData(titleKey.key).find(d => d.id == oid);
        console.log('modelvalues', cmr.model.values)
    }
    else {
        if (data.newOption && data.text) {
            cmr.model.values = {
                _full_name: data.text
            }
        }
    }

    const record = await _libs_exports__WEBPACK_IMPORTED_MODULE_0__["record"]();

    cmr.model.attributes = Object.assign([], data.personVariables);
    cmr.model.attributes.find(a => a.key_name_id === '_foreign_post').required = true;
    cmr.model.tableName = moduleTableName;
    const modal = new ModalDialog.default({
        onShown: () => data.onShown && data.onShown(cmr),
        onClose: () => data.onClose && data.onClose(update, data, cm)
    });
    record.default({
        $parent: modal,
        cm: cmr,
        saveOptions: {
            rootUrl: _app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot + '/mb2data',
            urlParameters: ['json_flags=0'],
            beforeRequest: request => {
                const attributes = request.attributes;
                if (cmr.model.attributes._tax_id.required === true) {
                    const res = Object(jsvat__WEBPACK_IMPORTED_MODULE_2__[/* checkVAT */ "a"])(attributes[':_tax_id'], jsvat__WEBPACK_IMPORTED_MODULE_2__[/* countries */ "b"].filter(cnt => cnt.name !== 'Brazil'));
                    if (!res.isValid) {
                        cmr.get('_tax_id').$error.text(t`Številka ne ustreza pravilom za davčno številko.`);
                        return false;
                    }
                    attributes[':_tax_id'] = res.value;
                }

                if (cmr.model.attributes._iban.required === true) {
                    if (!iban__WEBPACK_IMPORTED_MODULE_3__["isValid"](attributes[':_iban'])) {
                        cmr.get('_iban').$error.text(t`Številka TRR ne ustreza pravilom za IBAN.`);
                        return false;
                    }
                }

                return true;
            }
        },
        onInit: () => {
            const add = cmr.model.values && cmr.model.values.id ? false : true;
            const slovenijaId = (cmr.getData('_country').find(c => c.key === 'Slovenia') || {}).id;

            const postCmp = cmr.get('_post_number');
            const countryCmp = cmr.get('_country');
            const citizenShipCmp = cmr.get('_citizenship');
            const foreignPostCmp = cmr.get('_foreign_post');
            const taxIdCmp = cmr.get('_tax_id');
            const phoneCmp = cmr.get('_phone');
            const ibanCmp = cmr.get('_iban');

            taxIdCmp && taxIdCmp.$help && taxIdCmp.$help.text(t`zapis se mora začeti z dvomestno kodo države in ustrezati pravilom za izračun ID za DDV, npr.: SI91496080`);
            phoneCmp && phoneCmp.$help && phoneCmp.$help.text(t`telefonska številka brez ločil, lahko vsebuje presledke, če je tuja telefonska številka se mora začeti z izhodno številko Slovenije 00`);
            ibanCmp && ibanCmp.$help && ibanCmp.$help.text(t`Primera pravilnega vpisa (presledki in pomišljaji niso pomembni): SI56 1920 0123 4567 892`);

            foreignPostCmp.$el().hide();
            foreignPostCmp.skipValidation = true;

            if (add) {
                countryCmp.val(slovenijaId);
                citizenShipCmp.val(slovenijaId);
            }
            else {
                if (cmr.model.values['_post_number']==-1) {
                    postCmp.$el().hide();
                    foreignPostCmp.$el().show();
                    foreignPostCmp.skipValidation = false;
                }
            }

            countryCmp.onSelectHook = () => {
                if (parseInt(countryCmp.val()) === parseInt(slovenijaId)) {
                    if (parseInt(postCmp.val()) === -1) {
                        postCmp.val(null);
                    }
                    postCmp.$el().show();
                    
                    foreignPostCmp.$el().hide();
                    foreignPostCmp.skipValidation = true;
                }
                else {
                    foreignPostCmp.$el().show();
                    foreignPostCmp.skipValidation = false;
                    postCmp.$el().hide();
                    postCmp.val(-1);
                }
            }

        },
        refValues: data.refValues,
        
        onSuccessfullySaved: (_cm, values) => {
            data.onSuccessfullySaved && data.onSuccessfullySaved(_cm, values, data.personVariables, data.refValues, update, data, cm);
            modal.hide();
        }
    });
    modal.show();

}

/***/ })

}]);
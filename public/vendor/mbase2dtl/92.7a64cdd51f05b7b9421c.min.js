(window["webpackJsonpmbase2modules"] = window["webpackJsonpmbase2modules"] || []).push([[92],{

/***/ 131:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./src/libs/exports.js
var libs_exports = __webpack_require__(7);

// EXTERNAL MODULE: ./src/app-globals.js
var app_globals = __webpack_require__(0);

// CONCATENATED MODULE: ./src/modules/mbase2_interventions/intervention_event.js



/**
 * @param {object} op options
 * @param {object} op.$parent
 * @param {string} op.tname
 */
/* harmony default export */ var intervention_event = (async op => {
    const [
        utils,
        mutils,
        Mbase2Module,
        Button,
        SimpleTable,
        ComponentManager,
        ModalDialog,
        SelectWithSpecify,
        Storage,
        InterventionMeasures
    ] = await Promise.all([
        libs_exports["utils"](),
        libs_exports["mutils"](),
        libs_exports["Mbase2Module"](),
        libs_exports["Button"](),
        libs_exports["SimpleTable"](),
        libs_exports["ComponentManager"](),
        libs_exports["ModalDialog"](),
        libs_exports["SelectWithSpecify"](),
        libs_exports["Storage"](),
        __webpack_require__.e(/* import() */ 90).then(__webpack_require__.bind(null, 132))
    ]);

    const t = app_globals["a" /* default */].t;

    let table = null;

    let moduleVariablesKeyed=null, refValuesKeyed=null;

    const m = new Mbase2Module.default({
        addHeader: false,
        ignoreQueryFid: true,
        moduleKey: 'interventions',
        tableName: 'interventions_events',
        viewName: 'interventions_events',
        title: t`Intervencije`,
        subtitle: {
            edit: t`urejanje intervencije`, 
            new: t`nova intervencija`
        },
        $parent: op.$parent,
        skipVariables: ['_licence_name', '_batch_id','_species_name', '_uname', 'event_date'],
        onBeforeRequest: (key, request, cm) => {
            if (key !== 'save') return;
            request.attributes[':_uid'] = true;
            mutils.handleSelectWithSpecifyComponentData(request, cm);
        },
        sections: [
            {
                container: null,
                variables: ['intervention_id','_data'],
            },
            {
                title: t`Klic`,
                variables: ['intervention_caller', 'intervention_call_timestamp']
            },
            {
                title: t`Vzrok intervencije`,
                variables: ['intervention_reason', 'situation_notes']
            },
            {
                title: t`Intervencijski ukrepi`,
                variables: ['intervention_measures']
            },
            {
                title: t`Čas začetka in konca intervencije`,
                variables: ['intervention_start_timestamp', 'intervention_end_timestamp']
            },
            {
                title: t`Izid intervencije`,
                variables: ['intervention_outcome']
            },
            {
                title: t`Intervencijska skupina`,
                variables: ['chief_interventor', 'interventors'],
                overrides: {
                    _interventors: {
                        onSelect: e => {
                            if (!table || !e) return;
                        }
                    }
                }
            },
            {
                title: t`Podrobnosti intervencijskega dogodka`,
                variables: ['intervention_details']
            },
            {
                title: t`Notes`,
                variables: ['notes']
            },

        ],
        buttons: [
            {
                key: 'save',
                label: t`Shrani`
            },
            {
                key: 'add',
                label: t`Nov dogodek`
            }
        ],
        componentDefinitionOverrides: {
            intervention_caller: {
                component: SelectWithSpecify,
                defaultOptions: true
            },
            intervention_reason: {
                component: SelectWithSpecify,
                defaultOptions: true
            },
            intervention_measures: {
                component: InterventionMeasures,
                defaultOptions: true,
                additionalComponentOptions:{
                    onSelect: value => onInterventionMeasuresTypeSelect(value)
                }
            },
            intervention_outcome: {
                component: SelectWithSpecify,
                defaultOptions: true
            },
            intervention_id: {
                _component: {
                    import: () => Storage
                }
            },
            _data: {
                _component: {
                    import: () => Storage
                }
            },
            intervention_call_timestamp: {
                additionalComponentOptions:{
                    format:'dd.mm.yyyy',
                    onChange: (value, valueDate, valueTime) => {
                        onTimeStampChanged(value, valueDate, valueTime, 'intervention_start_timestamp','intervention_call_timestamp');
                        const cm = m.cm;
                        const cmp = cm.get('intervention_measures');
                        if (!cmp) return;
                        onInterventionMeasuresTypeSelect(cmp.select.val());
                    }
                }
            },
            intervention_end_timestamp: {
                additionalComponentOptions:{
                    format:'dd.mm.yyyy'
                }
            },
            intervention_start_timestamp: {
                additionalComponentOptions:{
                    format:'dd.mm.yyyy',
                    onChange: (value, valueDate, valueTime) => {
                        onTimeStampChanged(value, valueDate, valueTime, 'intervention_end_timestamp','intervention_start_timestamp');
                    }
                }
            }
        },
        componentOverrides: {
            intervention_details: intervention_details
        },
        initialData: op.initialData,
        moduleVariables: op.moduleVariables,
        refValues: op.refValues,
        onSaveSuccessCallback: (res) => {
            op.$bm.html(processInterventionEventResult(res));
            op.onSaveSuccessCallback && op.onSaveSuccessCallback(res);
        },
        onSectionsInitialized: () => {
            
            validateSectionStatus();
            op.onSectionsInitialized && op.onSectionsInitialized();
        },
        onComponentChange: (key, value, cm) => {
            
            validateSectionStatus();
            op.onComponentChange && op.onComponentChange(key, value, cm);
        }
    });

    function validateSectionStatus() {
        if (m.sectionsValidated()) {
            op.$bm.addClass('bookmark-completed');
        }
        else {
            op.$bm.removeClass('bookmark-completed');
        }
    }

    await m.init();

    const moduleVariables = m.variables;
    const refValues = m.refValues;

    refValuesKeyed = await mutils.convertReferencesToAssocArray(refValues);
    moduleVariablesKeyed = utils.convertToAssocArray(moduleVariables, 'key_name_id');

    let state = m.cm.val();

    function onTimeStampChanged(value, valueDate, valueTime, nextTimeStampComponentKey, thisTimeStampComponentKey) {
        const cm = m.cm;
        const nextTimeStampComponent = cm.get(nextTimeStampComponentKey);

        if (!nextTimeStampComponent) return;

        const startValue = nextTimeStampComponent.val()
        if (startValue && startValue < value) {
            nextTimeStampComponent.val(value);
            const anext = cm.model.attributes[nextTimeStampComponentKey];
            const athis = cm.model.attributes[thisTimeStampComponentKey];
            $.toaster({ message : `Vrednost polja "${anext.t_name_id || anext.key_name_id}" je bila avtomatsko nastavljena na vrednost polja "${athis.t_name_id || athis.key_name_id}".` , priority: 'warning' });
        }

        nextTimeStampComponent.dp.dp.setStartDate(valueDate);
    }

    function onInterventionMeasuresTypeSelect(value) {   
        if (!value) return;

        const cm = m.cm;
        const interventionStartCmp = cm.get('intervention_start_timestamp');
        const interventionEndCmp = cm.get('intervention_end_timestamp');

        if (!interventionStartCmp) return;
        if (!interventionEndCmp) return;

        let disabled = false;

        if (value==-1 || (value.params && value.params.data)) { //če je izbran "Ukrepi na terenu" ali če je izbral enega od ukrepov na terenu
            disabled = false;
        }
        else {
            disabled = true;
            const interventionCallCmp = cm.get('intervention_call_timestamp');
            interventionStartCmp.val(interventionCallCmp.val());
            interventionEndCmp.val(interventionCallCmp.val());
        }

        interventionStartCmp.dp.$input.prop('disabled', disabled);
        interventionStartCmp.tp.$input.prop('disabled', disabled);
        interventionEndCmp.dp.$input.prop('disabled', disabled);
        interventionEndCmp.tp.$input.prop('disabled', disabled);
    }

    async function intervention_details($container, cm, key) {

        const attributes = [
            mutils.createVariableDefinition('_interventor',t`Član interv. skupine`,'table_reference',m.refValues.trefs.find(tref => tref.key==='interventions_view_interventors').id),
            mutils.createVariableDefinition('_measure',t`Intervencijski ukrep`,'code_list_reference',m.refValues.codeLists.find(cl => cl.key==='intervention_measure_options').id),
            mutils.createVariableDefinition('_intervention_action_date',t`Datum`,'date'),
            mutils.createVariableDefinition('_elapsed_time',t`Porabljen čas (h)`,'integer'),
            mutils.createVariableDefinition('_km_job',t`Kilometrina službeno vozilo (km)`,'integer'),
            mutils.createVariableDefinition('_km_private',t`Kilometrina privatno vozilo (km)`,'integer')
        ];

        const button = new Button.default({
            label: t`Dodaj`,
            onClick: async () => {
              const cmr = new ComponentManager.default();
              const record = await libs_exports["record"]();
              cmr.model.attributes = attributes;
  
              const modal = new ModalDialog.default();
              record.default({
                  refValues: m.refValues,
                  $parent: modal,
                  cm: cmr,
                  saveOptions: {
                      beforeRequest: requestParameters => {
                          
                          if(!table) return;
                          
                          const attributes = requestParameters.attributes;
                          const row = {};
                          Object.keys(attributes).map(key => {
                              row[key.substring(1)] = attributes[key];
                          });
  
                          table.add(row);
                          modal.hide();
                          return false;
                      }
                  }
              });
              modal.show();
            }
          });
  
          $container.append(button.$el());
          $container.append('<br>');

        table = await cm.add({
            key: 'intervention_event_details',
            component: SimpleTable.default,
            options: {
                attributes: attributes,
                language: app_globals["a" /* default */].language,
                tableReferences: utils.convertToAssocArray(m.refValues.tableReferences, '_id_list_id'),
                codeListValues: utils.convertToAssocArray(m.refValues.codeListValues, 'id')
            },
            $parent: $container
        });

    }

    function processInterventionEventResult(res, skipEmpty = true, delimiter='<br>', keys=[
        'id', 
        '_uid', 
        'intervention_caller',
        'intervention_call_timestamp',
        'intervention_start_timestamp',
        'intervention_end_timestamp',
        'intervention_reason',
        'intervention_outcome',
        'chief_interventor',
        'notes'
    ]) {
        const clonedRes = Object.assign({}, res);
        
        if (skipEmpty === true) {
            Object.keys(clonedRes).map(key => {
                const value = clonedRes[key];
                if (!value) delete clonedRes[key];
            });
        }

        mutils.processAttributeValues(clonedRes, moduleVariablesKeyed, refValuesKeyed);
        return mutils.attributeValuesToHtml(clonedRes, moduleVariablesKeyed, delimiter, keys);
    }
    

    function save(interventionId) {
        m.cm.get('intervention_id').val(interventionId);
        const nstate = m.cm.val();
        
        if (!_.isEqual(state, nstate)) {
            state = nstate;
            return m.actionHandler('save');
        }
    }

    return Object.freeze({
        save,
        moduleVariables,
        refValues,
        processInterventionEventResult,
        cm: m.cm,
        moduleVariablesKeyed,
        refValuesKeyed,
        m
    });
});
// CONCATENATED MODULE: ./src/modules/mbase2_interventions/intervention.js





window.addEventListener('popstate', (event) => {
    //event.state && event.state.id && parseInt(event.state.id) > 0 && window.location.reload();
    window.location.reload();
});

/**
 * @param {object} op options
 * @param {object} op.$parent
 * @param {string} op.tname
 */
/* harmony default export */ var intervention = __webpack_exports__["default"] = (async op => {
    const [
        utils,
        mutils,
        Mbase2Module,
        Button,
        SimpleTable,
        ComponentManager,
        ModalDialog
    ] = await Promise.all([
        libs_exports["utils"](),
        libs_exports["mutils"](),
        libs_exports["Mbase2Module"](),
        libs_exports["Button"](),
        libs_exports["SimpleTable"](),
        libs_exports["ComponentManager"](),
        libs_exports["ModalDialog"]()
    ]);

    const t = utils.t;

    let table = null;

    let interventionEventModuleVariables = null;
    let interventionEventRefValues = null;

    const interventionEvents = [];

    const m = new Mbase2Module.default({
        moduleKey: 'interventions',
        tableName: 'interventions',
        viewName: 'interventions',
        title: t`Intervencije`,
        subtitle: {
            edit: t`urejanje intervencije`, 
            new: t`nova intervencija`
        },
        $parent: op.$parent,
        skipVariables: ['_location','_data', '_licence_name', '_batch_id', '_uname', 'event_date','date_record_created', 'date_record_modified', '_completed'],
        onBeforeRequest: (key, request, cm) => {
            if (key !== 'save') return;
            
            request.attributes[':_uname'] = true;

            mutils.handleSelectWithSpecifyComponentData(request, cm);

            request.attributes[':_completed'] = isInterventionCompleted();
        },
        //sections: [],
        buttons: [
            {
                key: 'add',
                iconClass:'plus',
                onClick: () => {
                    addInterventionEvent();
                },
                label: t`Nov intervencijski dogodek`
            },
            {
                key: 'save',
                label: t`Shrani`,
            }
        ],
        onSaveSuccessCallback: async (res) => {
            for (const ev of interventionEvents) {
                const result = await ev.dataObject.save(res.id);
                ev.initialData = result;
            }
        },
        componentOverrides: {
            
        },
        componentDefinitionOverrides: {
            _location_data: {
                additionalComponentOptions: {
                    defaultSpatialRequest: {
                        apiRoot: app_globals["a" /* default */].apiRoot
                    },
                    distanceFromSettlement: true,
                    localName: true,
                    _locations_table: "interventions"
                }
            }
        }
    });

    await m.init();

    m._initialData && m._initialData.id && fetchInterventionEvents(m._initialData.id);

    const interventionEventsSection = await m.addSectionContainer(t`Intervencijski dogodki`, '_intervention_events', null, {
        title: t`Intervencijski dogodki`,
        required: true
    });

    async function fetchInterventionEvents(interventionId) {
        if (!interventionId) return;
        const res = await mutils.requestHelper(app_globals["a" /* default */].apiRoot + `/mb2data/interventions_events?:intervention_id=${interventionId}`);
        for (const r of res) {
            await addInterventionEvent(r);
        }
        updateInterventionData();
    }

    function isInterventionCompleted() {
        let completed = true;

        for (const ev of interventionEvents) {
            
            if (!ev.dataObject.m.sectionsValidated()) {
                completed = false;
                break;
            }
        }

        const interventionEventsKeys = Object.keys(m.bookmarks).filter(key => key.startsWith('_intervention_event'));

        return m.sectionsValidated(interventionEventsKeys) && completed ? true : 0;
    }

    async function addInterventionEvent(initialData = null) {

        const inx = interventionEvents.length+1;

        const interventionEventSection = await m.addSectionContainer(initialData ? '' : `<b>${t`Začasni ID`}:</b> ${1000+inx}`, '_intervention_event_'+inx, interventionEventsSection.$container, {
            content: !initialData && `<b>${t`Začasni ID`}:</b> ${1000+inx}<br><b>${t`Uporabnik`}:</b> ${app_globals["a" /* default */].user.name}`,
            required: true,
            $parent: interventionEventsSection.$bm,
            delayScroll: true,
            $scrollContainer: m.$right
        }, {
            onPanelRemove: async ($pdiv, $el) => {
                if (!confirm(t`Ali res želiš izbrisati izbrani dogodek?`)) return;

                const id = (initialData && initialData.id) || (interventionEventSection && interventionEventSection.initialData && interventionEventSection.initialData.id);
                
                if (id) {
                    const callbacks = await mutils.assignRequestCallbackToasters({});
                    const res = await mutils.requestHelper(app_globals["a" /* default */].apiRoot + '/mb2data/interventions_events/' + id, 'DELETE', null, callbacks);
                    if (res===false) return;
                }

                interventionEventSection.$bm.remove();
                $el.remove();
                
                const spliceInx = interventionEvents.findIndex(ie => ie.inx === interventionEventSection.inx);
                
                interventionEvents.splice(spliceInx, 1);
                onInterventionEventChange();
                updateInterventionData();

                const interventionCompleted = isInterventionCompleted();

                if (m._initialData._completed != interventionCompleted) {
                    await mutils.requestHelper(app_globals["a" /* default */].apiRoot + '/mb2data/interventions/' + m._initialData.id, 'PUT', {':_completed':interventionCompleted});
                }
            }
        });

        interventionEventSection.inx = interventionEvents.length;

        interventionEventSection.initialData = initialData;

        const $sectionHeaderLink = interventionEventSection.$container.parent().parent().find('.panel-title:first a');

        interventionEvents.push(interventionEventSection);
    
        interventionEventSection.dataObject = await intervention_event({
            $parent: interventionEventSection.$container,
            initialData: initialData,
            moduleVariables: interventionEventModuleVariables,
            refValues: interventionEventRefValues,
            $bm: interventionEventSection.$bm,
            onSaveSuccessCallback: res => {
                updateSectionHeader(res);
                updateInterventionData();
            },
            onComponentChange: () => {
                onInterventionEventChange();
            },
            onSectionsInitialized: () => {
                onInterventionEventChange();
            }
        });

        function onInterventionEventChange() {
            if (interventionEventsSection.$bm.find('.bookmark-completed').length === interventionEvents.length) {
                interventionEventsSection.$bm.addClass('bookmark-completed');
            }
            else {
                interventionEventsSection.$bm.removeClass('bookmark-completed');
            }
        }

        interventionEventModuleVariables = interventionEventModuleVariables || interventionEventSection.dataObject.moduleVariables;
        interventionEventRefValues = interventionEventRefValues || interventionEventSection.dataObject.refValues;

        initialData && interventionEventSection.$bm.html(interventionEventSection.dataObject.processInterventionEventResult(initialData));

        initialData && updateSectionHeader(initialData);
        
        function updateSectionHeader(res) {
            $sectionHeaderLink.html(
                interventionEventSection.dataObject.processInterventionEventResult(res, true, '<br>', ['id', 'intervention_reason', 'intervention_call_timestamp','intervention_start_timestamp','intervention_end_timestamp'])
            );
        }
    }

    function updateInterventionData() {
        if (interventionEvents.length === 0) return;

        const keys = ['intervention_caller', 'intervention_call_timestamp', 'intervention_start_timestamp', 'intervention_end_timestamp', 'intervention_reason', 'intervention_measures', 'intervention_measures', 'chief_interventor','interventors']
        
        const evals = {};
        for (const key of keys) {
            evals[key] = [];
        }

        let numberOfUnfinishedInterventions = 0;
        
        interventionEvents.map(ev => {
            const values = ev.dataObject.cm.val()
            for (const key of keys) {
                let value = values[key];
                if (!value) {
                    if (key === 'intervention_end_timestamp') {
                        numberOfUnfinishedInterventions++;
                    }
                    continue;
                }

                if (value.select) { //select with specify
                    value = value.select;
                }

                evals[key].push(value);
            }
        });

        const {moduleVariablesKeyed, refValuesKeyed} = interventionEvents[0].dataObject;

        const summary = {};
        for (const key of keys) {
            summary[key] = [];
        }

        Object.keys(evals).map(key=>{

            if (key === 'intervention_measures') {
                const measures = [];
                evals[key] = evals[key].map(_measures => measures.push(..._measures));
                evals[key] = measures;
            }

            evals[key] = [...new Set(evals[key])];  //unique values
            
            for (const value of evals[key]) {
                const o = {[key]: value};
                mutils.processAttributeValues(o, moduleVariablesKeyed, refValuesKeyed);
                summary[key].push(o['t_'+key] || o[key] );
            }
        });
        
        summary.intervention_call_timestamp.sort();

        m.$status.html(`<b>${t`Čas prvega klica`}:</b> ${summary.intervention_call_timestamp[0]}, <b>${t`Čas zadnjega klica`}:</b> ${utils.lastItem(summary.intervention_call_timestamp)}`);
        m.$status.append('<br>');
        m.$status.append(`<b>${t`Čas prvega odziva`}:</b> ${summary.intervention_start_timestamp[0]}`);
        m.$status.append('<br>');
        m.$status.append(`<b>${t`Število odzivov brez določenega časa konca odziva`}:</b> ${numberOfUnfinishedInterventions}`);
    }
});

/***/ })

}]);
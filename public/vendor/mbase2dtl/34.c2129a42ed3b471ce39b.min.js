(window["webpackJsonpmbase2modules"] = window["webpackJsonpmbase2modules"] || []).push([[34],{

/***/ 108:
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ 41:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var datatables_net__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11);
/* harmony import */ var datatables_net__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(datatables_net__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var datatables_net_scroller_dt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(93);
/* harmony import */ var datatables_net_scroller_dt__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(datatables_net_scroller_dt__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var datatables_net_select_dt__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(95);
/* harmony import */ var datatables_net_select_dt__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(datatables_net_select_dt__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var datatables_net_keytable_dt__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(97);
/* harmony import */ var datatables_net_keytable_dt__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(datatables_net_keytable_dt__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var datatables_net_fixedcolumns_dt__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(99);
/* harmony import */ var datatables_net_fixedcolumns_dt__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(datatables_net_fixedcolumns_dt__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var datatables_net_buttons_js_buttons_html5__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(101);
/* harmony import */ var datatables_net_buttons_js_buttons_html5__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(datatables_net_buttons_js_buttons_html5__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var datatables_net_dt_css_jquery_dataTables_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(103);
/* harmony import */ var datatables_net_dt_css_jquery_dataTables_css__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(datatables_net_dt_css_jquery_dataTables_css__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var datatables_net_scroller_dt_css_scroller_dataTables_min_css__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(104);
/* harmony import */ var datatables_net_scroller_dt_css_scroller_dataTables_min_css__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(datatables_net_scroller_dt_css_scroller_dataTables_min_css__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var datatables_net_select_dt_css_select_dataTables_min_css__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(105);
/* harmony import */ var datatables_net_select_dt_css_select_dataTables_min_css__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(datatables_net_select_dt_css_select_dataTables_min_css__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var datatables_net_keytable_dt_css_keyTable_dataTables_min_css__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(106);
/* harmony import */ var datatables_net_keytable_dt_css_keyTable_dataTables_min_css__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(datatables_net_keytable_dt_css_keyTable_dataTables_min_css__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var datatables_net_fixedcolumns_dt_css_fixedColumns_dataTables_min_css__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(107);
/* harmony import */ var datatables_net_fixedcolumns_dt_css_fixedColumns_dataTables_min_css__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(datatables_net_fixedcolumns_dt_css_fixedColumns_dataTables_min_css__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _css_datatable_css__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(108);
/* harmony import */ var _css_datatable_css__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(_css_datatable_css__WEBPACK_IMPORTED_MODULE_11__);













/**
 * @param {object} op 
 * @param {string} op.css adds class name(s) to table element (if more class names is added they are to be separated by a space)
 * @param {array} op.header array of objects {key, label} where key is the key in table data object and label is header label or array of header labels
 * @param {function} op.onEdit if function is defined column with fa-edit icon is added and this function is executed when the icon is pressed
 * @param {function} op.onRowClicked 
 * @param {boolean} op.scroller if true table is scrollable, else table is paginated
 * @param {string} op.scrollY scrollable table property, defaults to 420
 * @param {boolean} op.scrollCollapse scrollable table property, defaults to true
 */

const DataTable = function (op) {
    const defaultClass = op.defaultClass === undefined ? "display cell-border" : op.defaultClass;
    const $el = $(`<table class="${defaultClass}" style="width:100%"></table>`);

    this.op = op;

    this.iconActions = {}

    this.op.__icons && this.op.__icons.map(icon => {
        this.iconActions[icon.action] = icon.onClick;
    });

    this.rowEditOptions = op.rowEditOptions;

    if (op.css) $el.addClass(op.css);

    if (op.scroller && op.scroller === true) {
        $el.addClass("nowrap");
        op.deferRender = op.deferRender === undefined ? true : op.deferRender;
        op.scrollY = op.scrollY === undefined ? 420 : op.scrollY;
        op.scrollCollapse = op.scrollCollapse === undefined ? true : op.scrollCollapse;
    }

    if (typeof op.header[0] === 'object' && op.header[0] !== null) {
        op.columns = op.header.map(ob => {
            const cdef = {data: ob.key, title: ob.label};
            if (op.hideColumns && op.hideColumns.indexOf(cdef.data) !== -1) {
                cdef.visible = false;
                cdef.searchable = true;
            }
            return cdef;
        });
    }
    else {
        op.columns = op.header.map(title => ({title: title}));
    }

    this.editable = op.onEdit ? true : false;
    this.delatable = op.deletable === true ? true : false;

    if (op.exportButtons === true) {
        op.dom = 'frtBip';
        op.buttons = [
            { extend: 'copy', className: 'btn btn-default' },
            { extend: 'csv', className: 'btn btn-default' }
        ]
    }

    if (!op.columnDefs) op.columnDefs = [];

    const icons = this._icons(this.editable, this.delatable);

    if (icons) {

        /**
         * //this works but I don't need it currently 
            op.columnDefs.push([
                {
                    render: function ( data, type, row ) {
                        console.log(data, type, row)
                        return '<a href="#" class="table-edit-action">'+data+'&nbsp;<span class="fa fa-edit"></span></a>'
                    },
                    "targets": 0
                }
            ]);
        */

        op.columns.unshift({data:"_mbase2_edit"}); //add column with edit icon
        op.columnDefs.push({
            "targets": 0,
            "orderable": false
        });
        op.order = [1, 'asc'];
                
        op.data.map((row, index) => {
            row._mbase2_edit = this.rowEditOptions ? this._icons(...this.rowEditOptions(row)) : icons;
        });
    }

    const self = this;

    if (op.customSearchInput) {
        op.dom = '<"top">rt<"bottom"i><"clear">';
        
        const searchInput = new op.customSearchInput.Constructor(Object.assign(op.customSearchInput.options || {placeholder:'Search'}, {
            onChange: (value) => {
                self.table.search(value).draw();
            }
        }));
        const $searchInput = searchInput.$el();
        $searchInput.css('padding-bottom', '10px');
        op.$container.append($searchInput);    
    }

    op.$container.append($el);

    const table = this.table = $el.DataTable(op);

    if (op.onEdit || op.deletable) {

        $el.find('tbody').on('click', 'a.table-action', function () {onTableActionClicked.call(this)});

        function onTableActionClicked() {
            const $a = $(this);
            const tr = $a.closest('tr')[0];
            const row = table.row(tr);
            var data = row.data();
            //row.id()
            const action = $a.data('action');
            if (action === 'edit') {
                op.onEdit && op.onEdit(data, row.id(), row.index());
            }
            else if (action === 'delete') {
                op.deletable && op.onDelete && op.onDelete(data, row);
            }
            else if (self.iconActions[action]) {
                self.iconActions[action](data, row.id());
            }
            
        } 
    }

    if (op.onRowSelected) {
        $el.find('tbody').on('click', 'tr', function () {
            var data = table.row( this ).data();
            op.onRowSelected(data);
        } );
    }

    this.$el = () => $el;
}

DataTable.prototype.destroy = function() {
    this.table.clear();
    this.table.destroy(true);
    return true;
}

DataTable.prototype.getColumnsMap = function() {
    const dataTableColumns = {};
    this.table.settings()[0].aoColumns.map((c, inx) => dataTableColumns[c.data]=inx);
    return dataTableColumns;
}

DataTable.prototype.getHeaderTitles = function() {
    return this.table.settings()[0].aoColumns.map(c => c.sTitle);
}

DataTable.prototype.getHeaderKeys = function() {
    return this.table.settings()[0].aoColumns.map(c => c.data);
}

DataTable.prototype.getCell = function(headerKey, rowInx) {
    if (!rowInx) return null;
    const c = this.table.settings()[0].aoColumns.find(c => c.data == headerKey);
    if (!c) return null;
    return this.table.cell(rowInx,c.idx);
}

DataTable.prototype.getRowCellsFormattedData = function(rowInx) {
    const res = [];
    this.table.settings()[0].aoColumns.map(c => {
        if (c.data !== '_mbase2_edit') {
            res.push({
                    title: c.sTitle,
                    value: this.table.cells(rowInx,c.idx).data()[0],
                    data: c.data
            });
        }
    });
    return res;
}

DataTable.prototype.getData = function() {
    const rowsData = this.table.rows().data();
    const len = rowsData.length;
    const data = [];
    for (let i=0; i < len; i++) {
        data.push(rowsData[i]);
    }
    return data;
}

/**
 * Helper function to construct table icons cell
 * @param {boolean} editable 
 * @param {boolean} deletable 
 */
DataTable.prototype._icons = function (editable, deletable) {
    let icons = '';
    
    if (editable) {
        icons = '<a href="#" class="table-action" data-action="edit"><span class="fa fa-edit"></span></a>&nbsp;';
    }

    if (deletable) {
        icons = icons + '<a href="#" class="table-action" data-action="delete"><span class="fa fa-trash"></span></a>';
    }

    if ((editable || deletable) && this.op.__icons) {
        icons += '&nbsp;';
    }

    this.op.__icons && this.op.__icons.map(icon => {
        icons += `<a href="#" style="${icon.style || ''}" class="table-action" data-action="${icon.action}"><span class="fa fa-${icon.class}"></span></a>&nbsp;&nbsp;`;
    });

    return icons;
}

DataTable.prototype.setData = function(data) {
    const icons = this._icons(this.editable, this.delatable);
    icons && data.map((row, index) => {
        row._mbase2_edit = this.rowEditOptions ? this._icons(...this.rowEditOptions(row)) : icons;
    });
    
    const datatable = this.table;
    datatable.clear();
    datatable.rows.add(data);
    datatable.draw(false); //Use draw(false) to stay on the same page after the data update.
}

DataTable.prototype.val = function(value) {
    if (value!== undefined) {
        const indexes = this.table.rows().indexes();
        for (let i=0; i<indexes.length; i++) {
            const row = this.table.row(indexes[i]);
            if (row.data().id == value) {
                row.select();
                return row;
            }
        }
        return;
    }
    
    return this.table.rows( { selected: true } ).data();
}

/* harmony default export */ __webpack_exports__["default"] = (DataTable);


/***/ })

}]);
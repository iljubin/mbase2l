(window["webpackJsonpmbase2modules"] = window["webpackJsonpmbase2modules"] || []).push([[27,18],{

/***/ 111:
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ 23:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * 
 * @param {<object>} op 
 * @param {string} op.type type of button defaults to btn-default
 * @param {string} op.classes additional classes to use, defaults to empty
 * @param {string} op.style DOM element style
 */
const Button = function (op) {
    const type = op.type ? op.type : 'btn-default';
    const classes = op.classes ? op.classes : '';
    const style = op.style ? op.style : '';

    const $el = $('<div/>');

    const $btn = $(`<button style="${style}" type="button" class="btn ${classes} ${type}"></button>`);

    if (op.iconClass) {
        const $icon=$('<i/>',{class:`fa fa-${op.iconClass}`,'aria-hidden':'true'});
        $btn.append($icon);
    }

    if (op.label) $btn.append((op.iconClass ? "&nbsp;" : "") +op.label);
    
    $el.append($btn);
    
    this.$el = () => $el;

    if (op.onClick) {
        $btn.click(op.onClick);
    }
}

/* harmony default export */ __webpack_exports__["default"] = (Button);

/***/ }),

/***/ 45:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _splidejs_splide__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(109);
/* harmony import */ var _splidejs_splide__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_splidejs_splide__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _splidejs_splide_dist_css_splide_min_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(110);
/* harmony import */ var _splidejs_splide_dist_css_splide_min_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_splidejs_splide_dist_css_splide_min_css__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _css_ImageArray_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(111);
/* harmony import */ var _css_ImageArray_css__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_css_ImageArray_css__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _Button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(23);






function createSplide($el) {
	return new _splidejs_splide__WEBPACK_IMPORTED_MODULE_0___default.a( $el[0] ,{
		//width: 200, //slider max width
		autoWidth: true,
		isNavigation: false,
		height: 80,
		gap: 10,
		arrows: true,
		pagination : false
		
	}).mount();
}

const ImageArray = function (op={}) {
	const $el = $('<div class="splide"></div>');
	const $track = $('<div class="splide__track"></div>');
	const $list = this.$list = $('<ul class="splide__list"></ul>');

	this.mediaRoot = op.mediaRoot;

	$track.append($list);
	$el.append($track);
	
    this.$el = () => $el;

	op.onClick && $el.on('click', op.onClick);
	
	this.splide = createSplide($el);

	const $input = this.$input = $("<input multiple accept='.png,.jpg' style='display:none' type='file' />");

	$el.append($input);

	const btnOptions = {
		label: op.label || 'Add image',
		onClick: () => {
			$input.trigger('click');
		}
	}

	const onImageRead = e => {
		this.add(e.target.result);
	}

	const self = this;
	$input.on('change', () => {

		const files = $input[0].files;

		for (var i = 0; i < files.length; i++) {
			const file = files[i];
			if (op.fileUpload) {
				op.fileUpload(file).then(res => {
					self.add(res, true);
				});
			}
			else {
				const reader = new FileReader();
				reader.addEventListener("load", onImageRead, false);
				reader.readAsDataURL(file);
			}
		}
	});

	if (!op.skipAddButton) {
		const btn = new _Button__WEBPACK_IMPORTED_MODULE_3__["default"](btnOptions);
		$el.append(btn.$el());
	}
	this.refreshVisibility();
}

ImageArray.prototype.add = function(dataSrc, refreshVisibility) {
	const fileName = dataSrc+'_thumbnail';
	const src = this.mediaRoot + '/m' + fileName.substring(0,2) + '/' + fileName;
	
	if (this.splide) {
		this.splide.add(`<li class="splide__slide"><img data-src="${dataSrc}" src="${src}"></li>`);
	}
	else {
		this.$list.append(`<li class="splide__slide"><img data-src="${dataSrc}" src="${src}"></li>`);
	}

	refreshVisibility === true && this.refreshVisibility();
}

ImageArray.prototype.refreshVisibility = function() {
	if (this.$list.find('img').length === 0) {
		this.$el().find('.splide__arrows').hide();
	}
	else {
		this.$el().find('.splide__arrows').show();
	}
}

ImageArray.prototype.val = function(value) {
	if (value !== undefined) {

		if (!Array.isArray(value)) {
			value = JSON.parse(value);
		}

		this.splide.destroy(true);
		this.$list.empty();
		this.splide = createSplide(this.$el());
		
		if (value !== null) {
			value.map && value.map(v => this.add(v));
		}

		this.refreshVisibility();

		return true;
	}

	const output = [];
	this.$list.find('img').each(function (i, img) {
		output.push(img.dataset.src);
	});

	return output;

}

/* harmony default export */ __webpack_exports__["default"] = (ImageArray);


    
    

/***/ })

}]);
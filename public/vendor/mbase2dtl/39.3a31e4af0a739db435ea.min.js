(window["webpackJsonpmbase2modules"] = window["webpackJsonpmbase2modules"] || []).push([[39],{

/***/ 27:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (`
  <div id="template" class="file-row">
    <!-- This is used as the file preview template -->
    <div>
        <span class="preview"><img data-dz-thumbnail /></span>
    </div>
    <div>
        <p class="name" data-dz-name></p>
        <strong class="error text-danger" data-dz-errormessage></strong>
    </div>
    <div>
        <p class="size" data-dz-size></p>
        <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0">
          <div class="progress-bar progress-bar-success" style="width:0%;" data-dz-uploadprogress></div>
        </div>
    </div>
    <div>
      <button class="btn btn-primary start" style="display:none">
          <i class="glyphicon glyphicon-upload"></i>
          <span>Start</span>
      </button>
      <button data-dz-remove class="btn btn-warning cancel">
          <i class="glyphicon glyphicon-trash"></i>
          <span>Remove</span>
      </button>
      <button data-dz-remove class="btn btn-danger delete">
        <i class="glyphicon glyphicon-trash"></i>
        <span>Delete</span>
      </button>
    </div>
  </div>
`);

/***/ }),

/***/ 67:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _DropzoneTemplates_blueimp__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(27);



/* harmony default export */ __webpack_exports__["default"] = (async op => {

    const [
        utils,
        mutils,
        DataFilter,
        Button,
        RadioButtonSelector,
        MediaScroller,
        ModalDialog,
        DropzoneLoader,
        ComponentManager,
        Inputs,
        DataOrder,
        Alert,
        Map
    ] = await Promise.all([
        _exports__WEBPACK_IMPORTED_MODULE_0__["utils"](),
        _exports__WEBPACK_IMPORTED_MODULE_0__["mutils"](),
        _exports__WEBPACK_IMPORTED_MODULE_0__["DataFilter"](),
        _exports__WEBPACK_IMPORTED_MODULE_0__["Button"](),
        _exports__WEBPACK_IMPORTED_MODULE_0__["RadioButtonSelector"](),
        _exports__WEBPACK_IMPORTED_MODULE_0__["MediaScroller"](),
        _exports__WEBPACK_IMPORTED_MODULE_0__["ModalDialog"](),
        _exports__WEBPACK_IMPORTED_MODULE_0__["DropzoneLoader"](),
        _exports__WEBPACK_IMPORTED_MODULE_0__["ComponentManager"](),
        _exports__WEBPACK_IMPORTED_MODULE_0__["Inputs"](),
        _exports__WEBPACK_IMPORTED_MODULE_0__["DataOrder"](),
        _exports__WEBPACK_IMPORTED_MODULE_0__["Alert"](),
        _exports__WEBPACK_IMPORTED_MODULE_0__["Map"]()
    ]);

    const t = utils.t;

    let map = null;

    let table = null;

    let changeTableRecordSetFunction = null;

    const dialog = new ModalDialog.default({
        size: 'modal-xl',
        maxWidth: '100%'
    });
    dialog.show();

    const $container = dialog.$body;

    $container.css('display', 'flex');
    $container.css('max-height', '');

    const $left =  $('<div style="width:640px"/>');
    const $mediaScroller =  $('<div style="height:100%; max-height: calc(100%); overflow-y: auto"/>');
    const $right = $('<div style="height:100%; width:calc(100% - 680px); max-height: calc(100%); border-left: solid black 1px; padding:10px"/>');
    $container.append($left);
    $container.append($right);

    $left.append($mediaScroller);

    const $map = $('<div style="height:50vh"/>');
    const $table = $('<div style="height:20vh"/>')

    $right.append($map);
    $right.append($table);

    const mediaScroller = new MediaScroller.default({
        fetch: (offset, scope = '/') => {
            console.log('fetch')
            return mutils.requestHelper(op.globals.apiRoot + '/uploaded-files' + op.mediaRootFolder +'/' + (offset || 0) + scope);
        },
        scope: '/unprocessed',
        mediaRoot: op.globals.mediaRoot + op.mediaRootFolder,
        onMediaSelected: onMediaSelected,
        onMediaSelectionChanged: onMediaSelectionChanged,
        onDataFetched: (data, added) => {
            changeTableRecordSetFunction && changeTableRecordSetFunction(data);
        }
    });

    $mediaScroller.append(mediaScroller.$el());

    const uploadBtn = new Button.default({
        label:t`Upload images`,
        iconClass: 'upload',
        type: 'btn-primary',
        classes: 'btn-lg',
        onClick: () => {

            const loader = new DropzoneLoader.default({
                url: op.globals.apiRoot + '/file-upload' + op.mediaRootFolder,
                onComplete: onFileUploaded,
                autoProcessQueue: false,
                template: _DropzoneTemplates_blueimp__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"]
            });

            const dlg = new ModalDialog.default({
                onClose: () => loader.dropzone.destroy()
            });

            dlg.$body.append(loader.$el());

            const uploadBtn = new Button.default({
                label:t`Upload`,
                onClick: () => {
                    loader.startUpload();
                    //loader.dropzone.processQueue();
                }
            });

            dlg.$footer.append(uploadBtn.$el());
            dlg.show();
        }
    });

    dialog.$footer.append(uploadBtn.$el());

    //table

    /**
     * Unprocessed images table
     */
    const fileAttributes = [];
    fileAttributes.push(mutils.createVariableDefinition('file_name', t`File name`, 'text'));
    fileAttributes.push(mutils.createVariableDefinition('uid', t`Uploaded by`, 'table_reference','_users'));
    fileAttributes.push(mutils.createVariableDefinition('record_created', t`Uploaded on`, 'timestamp'));
    fileAttributes.push(mutils.createVariableDefinition('photos', 'file_hash', 'jsonb'));

    const tableRecordsOptions = await mutils.generalTableRecordsOptions($table, '__unprocessed', fileAttributes); //there is no add or edit record posibility so we choose a dummy name for this table because it won't be binded directly to a database table
    
    tableRecordsOptions.tableOptions = {
        hideColumns: ['photos'],
        scrollY: '20vh'
    }

    tableRecordsOptions.btn_batch_import = false;
    tableRecordsOptions.btn_add_record = false;
    tableRecordsOptions.skipId = true;

    tableRecordsOptions.processTableData = (row, inx) => {

        row.photos = [row.file_hash];
        row.photos.map(photo => {
            row[photo] = true;
        });
        return row;
    };

    tableRecordsOptions.onTableCreated = (_table) => table = _table;

    tableRecordsOptions.changeRecordSet = (_changeRecordSet) => {
        changeTableRecordSetFunction = _changeRecordSet;
        changeTableRecordSetFunction([]);
    }

    tableRecordsOptions.cm = new ComponentManager.default();

    tableRecordsOptions.disableEdit = true;

    tableRecordsOptions.externalEditRecord = row => {
        dataTable && dataTable.__editRecord && dataTable.__editRecord();
    }
  
    const recordsTable = await __webpack_require__.e(/* import() */ 29).then(__webpack_require__.bind(null, 10));
    await recordsTable.default(tableRecordsOptions);

    function onFileUploaded(fileData, $el) {
        mediaScroller.appendImages([fileData], false);
        /*const cm = tableRecordsOptions.cm;
        const data = cm.getData('table');
        data.push(fileData);
        cm.refresh('table');*/
    }

    function onMediaSelected(mediaData) {
        map = Map.leafletPreview(map, $map, op.globals.mediaRoot + op.mediaRootFolder + mutils.filePath(mediaData.currentPhotoHash || mediaData.file_hash), mediaData.properties);
    }

    function onMediaSelectionChanged() {
        let currentTableCmp = table;
        const selectedMedia = mediaScroller.val();
        console.log('selectedMedia', selectedMedia)
        
        const photosColumnIndex = currentTableCmp.getColumnsMap()['photos'];
        //search the selected images in the table
        currentTableCmp.table
        .columns( photosColumnIndex )
        .search( selectedMedia.join('|'), true )
        .draw();
    }

});

/***/ })

}]);
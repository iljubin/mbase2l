(window["webpackJsonpmbase2modules"] = window["webpackJsonpmbase2modules"] || []).push([[43,75],{

/***/ 75:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _libs_exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _libs_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);
/* harmony import */ var _app_globals__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(0);
/**
 * mbase2 settings: codeLists
 */





/* harmony default export */ __webpack_exports__["default"] = (async op => {

    const {$parent} = op;

    const [
        ComponentManager,
        utils,
        mutils
    ] = await Promise.all([
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["ComponentManager"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["utils"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["mutils"]()
    ]);

    const translations = await mutils.getCodeList('code_lists');
    const translationsByKey = utils.arrayToObject(translations, 'key');
    
    console.log(translationsByKey);

    const components = {
        codeLists: _libs_exports__WEBPACK_IMPORTED_MODULE_0__["select"]({
            label: _libs_utils__WEBPACK_IMPORTED_MODULE_1__["t"]`Code lists`,
            onSelect: onSelectModuleName,
            tname: 'code_lists',
            process: item => {
                const translation = mutils.getCodeListValue(item.label_key, translationsByKey);
                return {
                    value: item.id, 
                    text: translation === item.label_key ? translation : `${translation} (${item.label_key})`
                }
            },
            $parent: $parent
        })
    };

    const isAdmin = _app_globals__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].user.roles.find(role => role === 'administrator' || role.includes('_admin')) ? true : false;

    const cm = new ComponentManager.default();
    await utils.loadComponents(components);
    const codeListsSelector = await cm.add(components.codeLists);

    codeListsSelector.$el().css('margin-bottom','10px')

    if (op.codeListKey) {
        const data = cm.getData('codeLists');
        const m = data.find(d => d.label_key == op.codeListKey);
        if (m) {
            codeListsSelector.val(m.id);
        }
    }
    
    const tableCm = new ComponentManager.default();

    async function onSelectModuleName(e) {
        const listId = utils.select2value(e)
        if (!listId) return;
        
///////////////////////////////////////////////////////////////////////////////////////////
        /** module variables */
        const definitions = (await __webpack_require__.e(/* import() */ 13).then(__webpack_require__.bind(null, 72))).default(_libs_exports__WEBPACK_IMPORTED_MODULE_0__, _app_globals__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]);
        const variablesAttributes = await definitions.code_list_options();
        
        const tableRecordsOptions = {
            $parent: $parent,
            tableName: 'code_list_options',
            url: _app_globals__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"].apiRoot + '/code_list_options',
            select: [{
                key: 'list_id',
                value: listId
            }],
            skipAttributesFromTable: ['list_id'],
            variablesAttributes: variablesAttributes
        }

        tableRecordsOptions.cm = tableCm;

        tableRecordsOptions.onInitRecord = cm => {
            if (cm.model.values) { //edit record
                cm.get('key').$input.prop('disabled', true);
            }   
        }

        tableRecordsOptions.btn_batch_import = false;

        if (!isAdmin) {
            tableRecordsOptions.btn_add_record = false;
        }

        tableRecordsOptions.tableOptions = {
            scrollY: 'calc(100vh - 270px)'
        };

        const recordsTable = await __webpack_require__.e(/* import() */ 96).then(__webpack_require__.bind(null, 10));
        recordsTable.default(tableRecordsOptions)

        //const moduleVariables = await cmVariables.add(components.module_variables(selectedModule.id, cm));
        
    } 
});

/***/ }),

/***/ 8:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getComponent", function() { return getComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resolvePromises", function() { return resolvePromises; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "select2value", function() { return select2value; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "select2text", function() { return select2text; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "patterns", function() { return patterns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hiddenInputs", function() { return hiddenInputs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "processData", function() { return processData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "upsertArray", function() { return upsertArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getQueryParameter", function() { return getQueryParameter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getEavData", function() { return getEavData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getData", function() { return getData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hrefClick", function() { return hrefClick; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "strLeftPad", function() { return strLeftPad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "empty", function() { return empty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addKeysToComponents", function() { return addKeysToComponents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "loadComponents", function() { return loadComponents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "loadComponent", function() { return loadComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "daysInMonth", function() { return daysInMonth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isValidDate", function() { return isValidDate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convertToAssocArray", function() { return convertToAssocArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createBreadcrumbs", function() { return createBreadcrumbs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "jsonParse", function() { return jsonParse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trimSlash", function() { return trimSlash; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rtrimSlash", function() { return rtrimSlash; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keyValueOutput", function() { return keyValueOutput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createFloatContainersSideBySide", function() { return createFloatContainersSideBySide; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "request", function() { return request; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "arrayToObject", function() { return arrayToObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "lastItem", function() { return lastItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "t", function() { return t; });
/* harmony import */ var _app_globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);


const getComponent = (name, components) => {
    return components.filter(component => component[name])[0][name];
}

/**
 * Resolves promisses
 * @param {Object} promises Object with key - value pairs, where value is a Promise
 * @returns {Object} a promise of all input promises which - when resolved - returns Object with key - value pairs, where value is resolved input promise
 */
const resolvePromises = (promises) => {
    return Promise.all( Object.values(promises) ).then( resolved => 
        Object.keys(promises).reduce((obj, key, index) => ({ ...obj, [key]: resolved[index] }), {}) //combine input object keys with resolved results
    );
}

/**
 * Extracts selected item from Select2 callback parameter
 * @param {object} e select2 callback argument
 */
const select2value = e => {
    if (!e) return e;
    return (e.params && e.params.data) ? e.params.data.id : e;
}

const select2text = e => {
    if (!e) return e;
    return (e.params && e.params.data) ? e.params.data.text : e;
}

const patterns = {
    non_zero_integer: '^[1-9][0-9]+',
    any_letter_two_times: '\\p{L}{2}',
    _kadrovska_koda_pattern: '\\p{Lu}{2}[\\d\\p{Lu}]?',
    machine_key: '^[A-Z_][A-Z0-9_]+',
    real_number: '^\\d*\\.?\\d+$',
    email: '^[a-zA-Z0-9.!#$%&â€™*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$',
    phone: '^[0][0-9]\\s*\\d(\\s*\\d){6,11}'
}

const hiddenInputs = keys => {
    return keys.map(key => 
        ({
            key: key, 
            required: true,
            validate: false
        })
    );
}

async function processData(data) {
    
    var values = data;

    if (data.fetch) {
        values = await request(data.fetch);
    }

    if (data.parse) {
        values = await data.parse(values);
    }

    return values;
}

const upsertArray = (arr, item, key = 'id') => {
    const variableIndex = arr.findIndex(v => v[key] == item[key]);

    if (variableIndex !== -1) {
        arr[variableIndex] = item;
    }
    else {
        arr.push(item);
    }
}

/**
 * https://stackoverflow.com/questions/2090551/parse-query-string-in-javascript
 * 
 * @param {string} variable variable to parse from query string
 */

const getQueryParameter = (variable) => {
    var query = window.location.search.substring(1);
    var vars = query.split('&');
    for (var i = 0; i < vars.length; i++) {
        var pair = vars[i].split('=');
        if (decodeURIComponent(pair[0]) == variable) {
            return decodeURIComponent(pair[1]);
        }
    }
}

async function getEavData(model, callback, apiRoot='') {

    const values = await request(apiRoot + `/virtual-table-values/${model.table}/language/${model.language}`);

    if (callback) {
        return await callback(values, model);
    }

    return values;
}

async function getData(model, apiRoot='') {

    let req;

    if (model.language) {
        req = `${model.table}/language/${model.language}`;
    }
    else {
        req = model.table;
    }

    const values = await request(apiRoot + '/' + req);

    return values;
}

function hrefClick(path, target = '_blank') {
    $(`<a href="${path}" ${target ? 'target='+target : ''}></a>`)[0].click();
}

/**
 * Pads input number with 
 * @param {integer | string} num 
 * @param {integer} size size of padded string
 * @param {string} [char = '0']  character to paddwith
 */

function strLeftPad(num, size, char = '0') {
    num = num.toString();
    if (!size) size = num.length;
    if (!size) return num;
    while (num.length < size) num = '0' + num;
    return num;
}

/**
 * https://www.sitepoint.com/testing-for-empty-values/
 * @param {*} data 
 * @returns true when data is:
 * - undefined or null
 * - a zero-length string
 * - an array with no members
 * - an object with no enumerable properties
 */

function empty(data)
{
  if(typeof(data) == 'number' || typeof(data) == 'boolean')
  { 
    return false; 
  }
  if(typeof(data) == 'undefined' || data === null)
  {
    return true; 
  }
  if(typeof(data.length) != 'undefined')
  {
    return data.length == 0;
  }
  var count = 0;
  for(var i in data)
  {
    if(data.hasOwnProperty(i))
    {
      count ++;
    }
  }
  return count == 0;
}

/**
 * Adds components object keys to object values
 * if object value is function it gets executed with a key as argument
 * 
 * @param {object} components 
 * @param {string} preposition
 */

const addKeysToComponents = (components, preposition = '') => {
    preposition = preposition && (preposition + '_'); //add an underscore if preposition is not empty
     
    Object.keys(components).map(key => {

        if (typeof components[key] === "function") {

            var proxied = components[key];
            components[key] = function() {
                const obj = proxied.apply( null, arguments );
                obj.key = preposition + key;
                return obj;
            };

        }
        else {
            components[key].key = preposition + key;
        }

    });  //add keys to components
}

/**
 * Adds a "key" property to the components defined in the first input argument and loads the components
 * 
 * @param {object} components 
 * @param {string} preposition preposition to be appended to a component key
 */

const loadComponents = (components, preposition = '') => {
    addKeysToComponents(components, preposition);
    return Promise.all(Object.keys(components).map(async key => {
        const component = components[key];
        if (component.module && typeof component.module === "function"){
            const impKey = component.import || 'default';
            component.component = (await component.module())[impKey];
        }
    }));
}

const loadComponent = async (key, component) => {
    if (component.module && typeof component.module === "function"){
        const impKey = component.import || 'default';
        component.component = (await component.module())[impKey];
    }
    component.key = key;
    return component;
}


/**
 * Get the number of days in any particular month
 * @link https://stackoverflow.com/a/1433119/1293256
 * @param  {integer} m The month (valid: 0-11)
 * @param  {integer} y The year
 * @return {integer}   The number of days in the month
 */
const daysInMonth = function (m, y) {
    switch (m) {
        case 1 :
            return (y % 4 == 0 && y % 100) || y % 400 == 0 ? 29 : 28;
        case 8 : case 3 : case 5 : case 10 :
            return 30;
        default :
            return 31
    }
};

/**
 * Check if a date is valid
 * @link https://stackoverflow.com/a/1433119/1293256
 * @param  {[type]}  d The day
 * @param  {[type]}  m The month
 * @param  {[type]}  y The year
 * @return {Boolean}   Returns true if valid
 */
const isValidDate = function (d, m, y) {
    m = parseInt(m, 10) - 1;
    return m >= 0 && m < 12 && d > 0 && d <= daysInMonth(m, y);
};

/**
 * Helper function: if array is passed it gets converted to object
 * @param {array|object} a 
 * @param {string} key 
 */
const convertToAssocArray = (a, key='id') => {
    if (a && Array.isArray(a)) {
        return arrayToObject(a, key);
    }
    return a;
}

const createBreadcrumbs = function(breadcrumbs) {
    const $ol = $('<ol class="breadcrumb" style="padding-bottom:0px"></ol>');
    for (let i=0; i<breadcrumbs.length; i++) {
        const bc = breadcrumbs[i];
        if (bc.class === 'active') {
            $ol.append(`<li class = "active"><strong>${bc.text}</strong></li>`);
        }
        else {
            $ol.append(`<li><a href="${bc.href}">${bc.text}</a></li>`);
        }
    }
    return $ol;
}

/**
 * Returns object form JSON string or object if argument is already an objevt
 * 
 * @param {string|object} json 
 */
const jsonParse = json => {
    if (typeof json !== 'object') {
        return JSON.parse(json);
    }

    return json;
}

const trimSlash = url => url.replace(/^\/+|\/+$/g, '');

const rtrimSlash = url => url.replace(/\/+$/g, '');

/**
 * A helper function to append key, value pairs to $el
 * @param {object} obj object of key values to putpur
 * @param {jquery DOM object} $el DOM element for the output
 * @param {object} keys iterate over keys provided in this parameter instead of all keys of the obj parameter
 * @param {array} keys.keys keys for the output
 * @param {object} keys.keyMap associative array obj.key 
 */
const keyValueOutput = (obj, $el, keys = null) => {
    const output = [];

    if (keys) {
        keys.keys.map(key => {
            const label = keys.keyMap[key];
            obj[label] && output.push(`<b>${label}:</b> ${obj[label]}`);    
        })
    }
    else {
        Object.keys(obj).map(label => {
            output.push(`<b>${label}:</b> ${obj[label]}`);
        });
    }

    $el.html(output.join('<br>'));
}

/**
 * Appends float left and float right container to $parent
 * @param {jQuery DOM object} $parent 
 */
const createFloatContainersSideBySide = $parent => {
    const $left =  $('<div style="float:  left;  width:49%;  overflow: auto"/>');
    const $right = $('<div style="float: right;  width:49%;  overflow: auto;"/>');
    $parent.append($left);
    $parent.append($right);
    $parent.append('<br style="clear:both">');

    return {
        $left: $left,
        $right: $right
    }
}


const fetchOptions = (op = {}) => Object.assign({
        method: 'GET', // *GET, POST, PUT, DELETE, etc.
        mode: 'cors', // no-cors, *cors, same-origin
        headers: { 'Content-Type': 'application/json', 'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content') },
        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
        //credentials: 'same-origin', // include, *same-origin, omit
        redirect: 'follow', // manual, *follow, error
        referrerPolicy: 'no-referrer' // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
    },op);

/**
 * Fetch API helper function with loading overlay option
 * 
 * @param {string} url 
 * @param {string} method request method in upercase 'GET', 'POST', 'PUT', 'DELETE', etc.
 * @param {object} data data to be sent with request (except for GET method, where the data should be put in the request's url)
 * @param {object} callbacks callback functions
 * @param {function} callbacks.loadingOverlay function with one argument, before the request it is invoked (if defined) with this argument set to true and after the request to false
 * @param {function} callbacks.onSuccess if defined called where response.ok === true
 * @param {function} callbacks.onError if defined called where response.ok === false
 * @param {object} _op fetchOptions overrides
 */

const request = async (url='', method = 'GET', data = null, callbacks = {}, _op = {}) => {
    
    const op = Object.assign({method: method}, _op);

    const loadingOverlayFunction = callbacks.loadingOverlay;

    const onSuccess = callbacks.onSuccess;

    const onError = callbacks.onError;

    if (data) {
        if (data instanceof File === true) {

            const formData = new FormData()
            formData.append('file', data, data.name);

            op.body = formData;
            op.headers = {};
        }
        else {
            op.body = JSON.stringify(data);
        }
    } 
    
    if (loadingOverlayFunction) loadingOverlayFunction(true);
    
    const response = await fetch(url, fetchOptions(op)).catch(e => {
        if (onError) onError({}, e);
    });
    
    if (loadingOverlayFunction) loadingOverlayFunction(false);

    if (response) {
        let parseResponse = 'text';
        const contentType = response.headers.get('content-type');
        if (contentType && contentType.includes('application/json')) {
            parseResponse = 'json';
        }
     
        const body = await response[parseResponse](); // parses JSON response into native JavaScript objects

        if (response.ok === true && onSuccess) onSuccess(response, body);
        if (response.ok === false && onError) onError(response, body);

        return response.ok === true ? body : false;
    }
    
    return false;
}

/**
 * Convert array of objects to associative object
 * @param {array<object>} arr 
 * @param {string} key the key in objects of input array to be used as associative key in the result
 */

const arrayToObject = (arr, key) => {
    if (!arr) return {};
    return arr.reduce((result, current) => {
        result[current[key]] = current;
        return result;
    }, {});
}

const lastItem = arr => {
    if (Array.isArray(arr) && arr.length>0) {
        return arr[arr.length-1];
    }
}

const t = _app_globals__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].t;


/***/ })

}]);
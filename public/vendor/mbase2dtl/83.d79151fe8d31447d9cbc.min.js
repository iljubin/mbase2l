(window["webpackJsonpmbase2modules"] = window["webpackJsonpmbase2modules"] || []).push([[83],{

/***/ 126:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function CulpritSigns(op={}) {
    const $el = $('<div/>');
    this.$el = () => $el;
    this.op = op;

    this.signs = {
        'Značilne sveže sledi (stopinje, dlaka, perje, iztrebki itd.) na škodnem objektu ali v neposredni bližini':	[],
        'Sledi močnih udarcev (močne podplutbe, zmečkanine, kri v ustni votlini ipd.)':	['Rjavi medved'],
        'Značilen ugriz v vrat': ['Dihur', 'Divja mačka', 'Evrazijski ris', 'Rjavi medved', 'Volk', 'Nezavarovana vrsta (tudi pes)', 'Drugo (navedi)'],
        'Obsežne poškodbe z velikimi ranami v predelu grla ali vratu':['Volk', 'Nezavarovana vrsta (tudi pes)'],
        'Več ugrizov na trebuhu, nogah, gobcu':['Volk', 'Nezavarovana vrsta (tudi pes)', 'Rjavi medved'],
        'Več ugriznih ran po celem telesu': ['Dihur', 'Divja mačka', 'Mala podlasica', 'Velika podlasica', 'Evrazijski ris', 'Rjavi medved', 'Volk', 'Nezavarovana vrsta (tudi pes)', 'Drugo (navedi)'],
        'Požrto vime':[	'Volk', 'Nezavarovana vrsta (tudi pes)', 'Rjavi medved'],
        'Požrti notranji organi':[	'Volk', 'Nezavarovana vrsta (tudi pes)', 'Rjavi medved', 'Krokar'],
        'Požrte mišice, notranji organi nedotaknjeni':[	'Evrazijski ris'],
        'Koža slečena s kadavra':[	'Evrazijski ris'],
        'Počena lobanja':[	'Volk', 'Rjavi medved'],
        'Zlomljena hrbtenica':[	'Volk', 'Rjavi medved'],
        'Značilen razmak med podočniki (60 mm – 90 mm)':[	'Rjavi medved'],
        'Značilen razmak med podočniki (35 mm – 40 mm)':[	'Volk'],
        'Značilen razmak med podočniki (30 mm – 35 mm)':[	'Evrazijski ris'],
        'Pokončane živali niso požrte':[	'Volk', 'Dihur'],
        'Površinske praske na telesu':[	'Volk', 'Nezavarovana vrsta (tudi pes)'],
        'Oglodani uhlji':[	'Nezavarovana vrsta (tudi pes)'],
        'Plen je premeščen/odvlečen z mesta uboja':	['Volk', 'Rjavi medved'],
        'Plen je zakopan':[	'Rjavi medved'],
        'Populjena dlaka ali perje ob kadavru':['Kanja', 'Kragulj', 'Planinski orel', 'Druga vrsta ujede ali sove'],
        'Način poškodovanja škodnega objekta':	[],
        'Način poškodovanja varovalnega objekta (ograje, ograde ipd.)':	['Rjavi medved', 'Volk'],
        'Predhodno pojavljanje istovrstnih škod v okolici z zanesljivo prepoznanim povzročiteljem':	[],
        'Povzročitelj opažen ali posnet v okolici nastanka škode pred/po nastanku škode':	[],
        'Pooblaščencu je bil prikazan slikovni material': [],
        'Poročilo ali zapisnik pooblaščene osebe (veterinar, policist ipd.)': [],
        'Drugo (navedi)': []
    };

    op.signs = Object.keys(this.signs);

    this.$selectDiv = $('<div/>');

    this.inputs = {};

    $el.append(this.$selectDiv);

    this.dropdown(op.selectedCulprit);
}

CulpritSigns.prototype.dropdown = function(culprit) {
    const op = this.op;
    const $el = this.$el();

    let signs = [];

    if (culprit) {
        Object.keys(this.signs).map(key => {
            const a = this.signs[key];
            if (a.indexOf(culprit) !== -1) {
                signs.push(key);
            }
            else if (a.length === 0) {
                signs.push(key);
            }
        })
    }

    if (signs.length === 0) {
        signs = Object.keys(this.signs);
    }

    this.select = new op.imports.Select2.default({
        multiple: true,
        data: signs,
        label: op.label,
        required: op.required,
        onUnselect: e => {
            if (!e) return;
            const key = e.params.data.id;
            const input = this.inputs[key];
            if (!input) return;
            input.$el().remove();
            delete this.inputs[key];
            $el.trigger('change');
        },
        onSelect: e => {
            
            if (!e) return;

            const key = e.params.data.id;
            const keys = Object.keys(this.inputs);
            if (keys.indexOf(key)===-1) {
                this._createInput(key);
            }

            $el.trigger('change');
        }
    });

    this.$selectDiv.html(this.select.$el());
}

CulpritSigns.prototype._createInput = function(key) {
    const input = new this.op.imports.Inputs.Input({
        label: key,
        type: 'text'
    });

    this.$el().append(input.$el());

    this.inputs[key] = input;
}

CulpritSigns.prototype.val = function(value) {
    if (value!==undefined){
        Object.keys(this.inputs).map(key => {
            this.inputs[key].$el().remove();
            delete this.inputs[key];
        });

        this.inputs = {};

        const keys = [];
        value.map(v => {
            const key = v.key;
            keys.push(key);
            this._createInput(key);
            this.inputs[key].val(v.value);
        });

        this.select && this.select.val(keys);
    }

    return Object.keys(this.inputs).map(key => ({
        key: key,
        value: this.inputs[key].val()
    }));
}

/* harmony default export */ __webpack_exports__["default"] = (CulpritSigns);

/***/ })

}]);
(window["webpackJsonpmbase2modules"] = window["webpackJsonpmbase2modules"] || []).push([[91],{

/***/ 89:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _libs_exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _app_globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);



/* harmony default export */ __webpack_exports__["default"] = (async op => {
    const [
        utils,
        mutils,
        Mbase2ModuleIndex
    ] = await Promise.all([
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["utils"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["mutils"](),
        __webpack_require__.e(/* import() */ 5).then(__webpack_require__.bind(null, 34)),
    ]);

    const t = utils.t;

    let moduleIndex;

    const isAdmin = _app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].user.roles.find(role => role === 'administrator' || role === 'mbase2_interventions_admin') ? true : false;

    const moduleIndexOptions = Object.assign({
        buttons: [
            {
                key: 'export',
                label: t`Izvoz podatkov`,
                onClick: () => {
                    utils.hrefClick(_app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot+'/export/interventions', null);
                }
            },
            {
                key: 'new',
                label: t`Nova intervencija`,
                iconClass: 'plus',
                path:'/intervention'
            }
        ],
        deletable: true,    //table will have trash can icon if row.__deletable===true
        recordTimeStamps: true,
        moduleKey:'interventions',
        urlForDelete: _app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot + '/mb2data/interventions',
        title: t`Pregled intervencij`,
        viewName:'interventions_view',
        skipVariables: ['_data','_licence_name','event_date','_location','_batch_id', '_location_data'],
        hideColumnsFromTable: [],
        singleRecordPath: '/intervention',
        sortVariables: true,
        splitRequiredAndOptionalAttributesWhenSorting: false,
        preprocessTableData: data => {
            data.map(row => {
                const completedLabel = row._completed ? t`ZAKLJUČENA` : t`V TEKU`;
                row._completed = `<span class="label label-${row._completed?'success':'danger'}">${completedLabel}</span>`;

                row.__deletable = isAdmin || _app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].user.uid == row._uname;

                const interventionMeasures = [];
                row.intervention_measures && row.intervention_measures.map(m => {
                    m && m.map(m=>interventionMeasures.push(m));
                });

                if (interventionMeasures.length > 0) {
                    row.intervention_measures = [...new Set(interventionMeasures)];
                }

                row._data = utils.jsonParse(row._data);
                row._location_data = utils.jsonParse(row._location_data);
                
                if (row._location_data && row._location_data._location && row._location_data._location.spatial_request_result) {
                    const spatialRequestResult = row._location_data._location.spatial_request_result;
                    ['oe_ime','lov_ime','luo_ime'].map(key => {
                        row[key] = spatialRequestResult[key];
                    });
                }
                
                
            });
        },
        additionalVariables: async (moduleVariables) => {
            
            let variables = await mutils.getModuleVariables('interventions_view', false);

            variables = [...moduleVariables, ...variables.filter(v => v.key_module_id !== "__default_module")];

            variables.map((v,inx) => {
                if (v.key_name_id === '_uname') {
                    v.weight = 10000;
                }
                else if (v.key_name_id === 'date_record_created') {
                    v.weight = 10001;
                }
                else if (v.key_name_id === 'date_record_modified') {
                    v.weight = 10002;
                }
                else if (v.key_name_id === 'notes') {
                    v.weight = 10003;
                }
                else if (v.key_name_id === '_completed') {
                    v.weight = -1;
                }
                else {
                    v.weight = inx;
                }
            });

            const completedVariableIndex = variables.findIndex(v => v.key_name_id==='_completed');
            if (completedVariableIndex !== -1) {
                variables[completedVariableIndex].t_name_id = t`Status`;
            }

            variables.push(Object.assign(mutils.createVariableDefinition('oe_ime',t`Območna enota`,'text'), {weight:1.1}));
            variables.push(Object.assign(mutils.createVariableDefinition('lov_ime',t`Lovišče`,'text'), {weight:1.2}));
            variables.push(Object.assign(mutils.createVariableDefinition('luo_ime',t`LUO`,'text'), {weight:1.3}));

            return variables;
        }
    }, op);

    moduleIndex = new Mbase2ModuleIndex.default(moduleIndexOptions);
    await moduleIndex.init();
});

/***/ })

}]);
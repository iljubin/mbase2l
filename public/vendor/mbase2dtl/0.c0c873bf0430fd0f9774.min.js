(window["webpackJsonpmbase2modules"] = window["webpackJsonpmbase2modules"] || []).push([[0],{

/***/ 9:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _libs_exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _app_globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);
/**
 * mbase2 data editor
 */




/**
 * @param {object} op options
 * @param {object} op.$parent
 * @param {string} [op.key_id] key (name) of default table to open (this is tableName - name of the table without the table schema, it is called key_id for compatibility reasons)
 * @param {string} [op.title] title for display (if omitted key_id is used)
 */
/* harmony default export */ __webpack_exports__["default"] = (async op => {

    const {$parent, key_id, title} = op;

    const [
        ComponentManager,
        utils,
        mutils
    ] = await Promise.all([
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["ComponentManager"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["utils"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["mutils"]()
    ]);

    const t = utils.t;

    let dataEditor = {  //this is for the export
        tableRecordsInstance: null
    }

    if (key_id) {
        op.skipTitle!==true && $parent.prepend(`<h2>${title || key_id}</h2><hr>`);

        const tableName = key_id;

        const variables = await mutils.getModuleVariables(tableName, false, false, true);

        const refValues = await mutils.getRefCodeListValues(variables);

        const tableEditor = await __webpack_require__.e(/* import() */ 4).then(__webpack_require__.bind(null, 26));

        dataEditor.tableRecordsInstance = await tableEditor.default(Object.assign(op, {
            refValues: refValues,
            variables: variables,
            $parent: $parent,
            tableName: tableName,
            schema: op.schema
        }));

        return dataEditor;
    }

    let tables = [];

    if (op.tables) {
        tables = op.tables;
    }
    else {

        tables = await batchRequestHelper([
            `modules/language/${_app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].language}`, 
            `referenced_tables/language/${_app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].language}`
        ]);
    
        tables[1].map(item => {

            if (item.t_id) {
                item.t_id = item.t_id + '*';
            }
            else {
                item.t_id = item.key_id + '*';
            }

        });

        tables = [...tables[0], ...tables[1]];
    }

    const components = {
        modules: _libs_exports__WEBPACK_IMPORTED_MODULE_0__["select"]({
            label: t`Modules`,
            onSelect: onSelectModuleName,
            data: {
                values: tables
            },
            process: item => ({value: item.id, text: (item.t_id || item.key_id)}),
            $parent: $parent
        })
    };

    const cm = new ComponentManager.default();

    await utils.loadComponents(components);
    await cm.add(components.modules);

    async function onSelectModuleName(e) {
        const moduleId = utils.select2value(e);
        if (!moduleId) return;

        const tableName = cm.getData('modules').filter(m => m.id == moduleId)[0].key_id;

        const references = await mutils.requestHelper(_app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot + `/module_references/language/${_app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].language}?:module_id=${moduleId}`);

        const allVariablesArray = [];
        Object.values(references).map(arr => allVariablesArray.push(...arr));
        
        const refValues = await mutils.getRefCodeListValues(allVariablesArray);

        const tableEditor = await __webpack_require__.e(/* import() */ 4).then(__webpack_require__.bind(null, 26));
        dataEditor.tableRecordsInstance = await tableEditor.default(Object.assign(op, {
            refValues: refValues,
            variables: references[tableName],
            $parent: $parent,
            tableName: tableName
        }));
    }

    return dataEditor;
}); 

/***/ })

}]);
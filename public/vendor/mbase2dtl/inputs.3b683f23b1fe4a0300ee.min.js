(window["webpackJsonpmbase2modules"] = window["webpackJsonpmbase2modules"] || []).push([[19],{

/***/ 22:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Input", function() { return Input; });
function appendHiddenSubmitButtonToForm($form) {
    const $submit = $(`<button type="submit" class="btn btn-default">Submit</button>`);
    $submit.hide();
    $form.submit(function(event){
        // cancels the form submission
        event.preventDefault();
    });
    $form.append($submit);
    return $submit;
}

const Input = function (op = {}, _inputs = null) {

    const $form = this.$form = op.$form || $('<form/>');

    this.type = op.type ? op.type : 'text';

    const $formGroup = $(`<div class="${op.required ? 'required' : ''}"></div>`);

    const $label = $(`<span class="label label-primary mbase2-label">${op.label}</span>`);
    
    if (this.type !== 'checkbox') {
        op.label && $formGroup.append($label);
    }

    const readOnly = op.read_only === true ? 'readonly' : '';
    const min = op.min ? `min="${op.min}"` : '';
    const max = op.max ? `max="${op.max}"` : '';
    const $input = this.$input = op.type === 'select' ? 
        $(`<select></select>`) : 
        $(`<input ${min} ${max} ${readOnly} ${op.required ? 'required' : ''} type="${this.type}" class="form-control" id="${op.key}" placeholder="${op.placeholder ? op.placeholder : ''}">`);

    if (op.type === 'select') {
        op.options.map(value => $input.append(`<option value="${value}">${value}</option>`))
    }

    if (op.onChange) {
        $input.on('change', () => op.onChange(_inputs));
    }
    
    if (!op.key) {
        $input.removeAttr('id');
    }

    op.keyup && $input.on('keyup', op.keyup);
    op.keydown && $input.on('keydown', op.keydown);
    op.onpaste && $input.on("paste", op.onpaste);
    
    op.pattern && $input.attr('pattern', op.pattern);
    op.step && $input.attr('step', op.step);

    op.helpIconText && $formGroup.append(`&nbsp;<span class="pficon pficon-help" title="${op.helpIconText}"></span>`);

    $formGroup.append($input);

    this.$help = $(`<span class="help-block"></span>`);
    op.help && this.$help.text(op.help);
    $formGroup.append(this.$help);
    this.$error = $(`<span class="help-block has-error"></span>`);
    $formGroup.append(this.$error);

    if (this.type === 'checkbox') {
        const $label = $('<label/>');
        $input.removeClass('form-control');
        $label.append($input);
        $label.append(op.label);
        $formGroup.append($label);
        $formGroup.addClass('checkbox');
    }

    const validateControl = op.validate === undefined ? true : op.validate;
    
    if (validateControl) {
        const $submit = op.$form ? op.$form.find(':submit') : appendHiddenSubmitButtonToForm($form);
        
        $input.blur(function(event) {
            //event.target.checkValidity();
            $formGroup.removeClass('has-error');
            $label.removeClass('has-error');
            if ($input.css('display')==='none') return;
            $submit.click();
        }).bind('invalid', function(event) {
            $formGroup.addClass('has-error');
            $label.addClass('has-error');
            //setTimeout(function() { $(event.target).focus();}, 50);
            return false;
        });
    }

    $form.append($formGroup); 

    this.$el = () => op.$form ? $formGroup : $form;

    if (op.mask) {
        const maskOptions = Object.assign(op.mask.options || {}, {$input: $input});
        this.imask = new op.mask.component(maskOptions);
    }

    if (op.data!==undefined) {
        this.val(op.data);
    }
}

Input.prototype.validate = function(reportValidity = true) {
    if (reportValidity === true) {
        return this.$form[0].reportValidity();
    }
    else {
        return this.$form[0].checkValidity();
    }
}

Input.prototype.val = function(a) {
    
    if (a!==undefined) {

        if (this.type === 'checkbox') {
            this.$input.prop('checked', a);
        }
        else {
            this.$input.val(a);
        }

        if (this.imask) {
            this.imask.mask.value = a;
        }

    }

    let rval;
    if (this.type === 'checkbox') {
        rval = this.$input.prop('checked');
    }
    else {
        rval = this.$input.val();
    }

    if (['number', 'date', 'time'].indexOf(this.type) !== -1 && !rval) return null;   //numbers, date and time shuldn't return an empty string

    return rval;
}

const Inputs = function (op) {
    const $form = this.$form = $('<form/>');
    
    const validateForm = op.validate === undefined ? true : op.validate;

    if (validateForm) {
        appendHiddenSubmitButtonToForm($form);
    }
    
    this.inputs = {};

    let _inputs = [];

    if (Array.isArray(op.inputs)) {
        _inputs = op.inputs;
    }
    else if (typeof op.inputs === "function") {
        _inputs = op.inputs();
    }

    _inputs.map(_op => {
        const validateControl = _op.validate === undefined ? true : _op.validate;
        _op.validate = validateForm && validateControl;
        _op.$form = $form;
        const input = new Input(_op, this.inputs);
        this.inputs[_op.key] = input;
    });

    this.$el = () => $form;

    if (op.data) {
        this.val(op.data);
    }
}

Inputs.prototype.validate = function(reportValidity = true) {
    if (reportValidity === true) {
        return this.$form[0].reportValidity();
    }
    else {
        return this.$form[0].checkValidity();
    }
}

Inputs.prototype.val = function(values) {
    
    if (values!==undefined) {
        if (!values) {
            values = {};
            Object.keys(this.inputs).map(key => {
                values[key] = null;
            });
        }

        Object.keys(values).map(key => {
            this.inputs[key] && this.inputs[key].val(values[key]);
        });
        return values;
    }

    const rval = {};

    const self = this;
    Object.keys(this.inputs).map(key => {
        rval[key] = self.inputs[key].val();
    });

    return rval;
}

/* harmony default export */ __webpack_exports__["default"] = (Inputs);

/***/ })

}]);
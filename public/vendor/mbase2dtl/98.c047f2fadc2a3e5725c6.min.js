(window["webpackJsonpmbase2modules"] = window["webpackJsonpmbase2modules"] || []).push([[98],{

/***/ 76:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _libs_exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _app_globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);



/**
 * @param {object} op options
 * @param {object} op.$parent
 * @param {string} op.tname
 */
/* harmony default export */ __webpack_exports__["default"] = (async op => {
    const {$parent, $header} = op;

    const [
        ComponentManager,
        utils,
        mutils,
        Button,
        ModalDialog,
        record

    ] = await Promise.all([
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["ComponentManager"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["utils"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["mutils"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["Button"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["ModalDialog"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["record"]()
    ]);

    const t = utils.t;

    const attributes = [
        mutils.createVariableDefinition('name', t`User name`, 'text', null),
        mutils.createVariableDefinition('mail', null, 'text', null),
        mutils.createVariableDefinition('pass', t`Password`, 'text', null),
        mutils.createVariableDefinition('roles', t`User roles`, 'table_reference_array', 'user_roles')
    ];

    const refValues = await mutils.getRefCodeListValues(attributes);

    let dataTable = null;
       
    const button = new Button.default({
        label: t`Add a new user`,
        iconClass: 'plus',
        type: 'btn-primary',
        classes: 'btn-lg',
        onClick: () => editRecord()
    });
    
    $header.html(mutils.moduleHeader(t`System users`,null,button.$el()));

    const sourceTable = '_users';
    const sourceTableSchema = '/mbase2';

    const userVariables = await mutils.requestHelper(_app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot + `/module_variables/language/${_app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].language}?:module_id:code_list_options/key=_users`);

    const tableRecordsOptions = {

        $parent: $parent,
        tableName: sourceTable,
        url: _app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot + sourceTableSchema + '/' + sourceTable,
        variablesAttributes: userVariables.filter(v => ['_ime', '_priimek', '_phone'].indexOf(v.key_name_id)===-1),
        btn_add_record: false,
        btn_batch_import: false,
        //disableEdit: true,
        skipId: true,
        tableOptions: {
            /*columnDefs: [ {
                orderable: false,
                className: 'select-checkbox',
                targets:   0
            } ],*/
            select: false,
            scrollY:'calc(100vh - 187px)'
        },
        preprocessTableData: data => {
            data.map(row => {
                row._roles = utils.jsonParse(row._roles).filter(role => role.startsWith('mbase2') || role === 'administrator');
            });
            return data;
        }
    }

    tableRecordsOptions.onTableCreated = table => {
        dataTable = table;
    }

    tableRecordsOptions.externalEditRecord = (row, rowId, rowIndex) => {
        console.log(row, rowId, rowIndex)
        editRecord(row)
    }

    const recordsTable = await __webpack_require__.e(/* import() */ 1).then(__webpack_require__.bind(null, 10));
    recordsTable.default(tableRecordsOptions);

    function editRecord(row) {
        const modal = new ModalDialog.default({
            onShown: () => {
                const cmr = new ComponentManager.default();
                cmr.model.attributes = attributes;

                if (row) {
                    console.log('row', row)
                    const keyMap = {
                        'id':'_uid',
                        'mail':'_email',
                        'name':'_uname',
                        'roles':'_roles'
                    };
                    cmr.model.values = {};

                    row._roles = utils.jsonParse(row._roles);
                    
                    Object.keys(keyMap).map(modelKey => {
                        const dbKey=keyMap[modelKey];
                        cmr.model.values[modelKey] = row[dbKey];
                    });
                }

                record.default({
                    $parent: modal,
                    cm: cmr,
                    /*saveCallbacks: [onRecordUpserted],
                    saveOptions: op.saveOptions,*/
                    refValues: refValues,
                    onInit: function (cm) {
                        
                        
                    },
                    title: ``,
                    onSave: async (cm) => {
                        const callbacks = await mutils.assignRequestCallbackToasters({});
                        const data = cm.val();
                        let method = 'POST';
                        if (row) {
                            data._uid = row._uid;
                            method = 'PUT';
                        }
                        mutils.requestHelper(_app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot + `/users`, method, data, callbacks).then(res => {
                            if (!res) return;

                            const data = dataTable.getData();
                            
                            if (row) {
                                const rowInx = data.findIndex(d => d._uid == res._uid);
                                console.log('_row', rowInx)
                                data[rowInx] = res;
                            }
                            else {
                                data.push(res);
                            }

                            dataTable.setData(data);
                        });
                    }
                });
            }
    
        });

        modal.show();
    }
});

/***/ })

}]);
(window["webpackJsonpmbase2modules"] = window["webpackJsonpmbase2modules"] || []).push([[50],{

/***/ 63:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "loadExports", function() { return loadExports; });
/* harmony import */ var _app_globals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);


const _imports = {};
let exports = null;

const t = _app_globals__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].t;

const loadExports = async _exports => {
    exports = _exports;
    [
        _imports.Button,
        _imports.ModalDialog,
        _imports.ComponentManager,
        _imports.DropDown,
        _imports.Select2,
        _imports.utils,
        _imports.mutils,
        _imports.SimpleTable,
        _imports.record,
        _imports.Inputs,
        _imports.DateInputs
    ] = await Promise.all([
        exports.Button(),
        exports.ModalDialog(),
        exports.ComponentManager(),
        exports.DropDown(),
        exports.Select2(),
        exports.utils(),
        exports.mutils(),
        exports.SimpleTable(),
        exports.record(),
        exports.Inputs(),
        exports.DateInputs()
    ]);
}

function conditionFieldManager(fieldDefinition, conditionCmp) {

    conditionCmp && conditionCmp.val(null);

    if (['code_list_reference', 'table_reference'].indexOf(fieldDefinition.dataType) !==-1) {
        conditionCmp.reinit([
            '=', '<>'
        ]);
    }
    else if (['short','integer','real','float','date', 'timestamp', 'time'].indexOf(fieldDefinition.dataType) !==-1) {
        conditionCmp.reinit([
            '>', '<', '=', '<>'
        ]);
    }
    else if (['varchar', 'text'].indexOf(fieldDefinition.dataType) !==-1) {
        conditionCmp.reinit([
            '=', 'LIKE'
        ]);
    }
    else {

    }
}

async function valueFieldManager(self, fieldDefinition, cm, $parent) {
    const t = _imports.utils.t;

    let valueCmp = cm.get('value');

    if (['code_list_reference', 'table_reference'].indexOf(fieldDefinition.dataType) !==-1) {
        const filtered = self.op.refValues[fieldDefinition.dataType === 'code_list_reference' ? 'codeListValues' : 'tableReferences']
            .filter(clv => clv.list_id == fieldDefinition.ref);
        const values = filtered.map(v => {
            let label = (v.translations && v.translations[_app_globals__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].language]) || v.key;

            if (self.op.additionalReferenceTableValues === true && v.additional !== undefined) {
                label = label + ' (' + v.additional + ')';
            } 
            
            return [v.id, label];
        });
        
        valueCmp = cm.add({
            key: 'value',
            component: _imports.Select2.default,
            options: {
                label: t`Value`,
                data: values
            },
            $parent: $parent
        }, true);
    }
    else if (['short','integer','real','float'].indexOf(fieldDefinition.dataType) !==-1) {
        valueCmp = cm.add({
            key: 'value',
            component: _imports.Inputs.Input,
            options: {
                label: t`Value`,
                type: 'number',
                step: 1e-6
            },
            $parent: $parent
        }, true);
    }
    else if (['varchar', 'text'].indexOf(fieldDefinition.dataType) !==-1) {
        valueCmp = cm.add({
            key: 'value',
            component: _imports.Inputs.Input,
            options: {
                label: t`Value`
            },
            $parent: $parent
        }, true);
    }
    else if (['date', 'timestamp'].indexOf(fieldDefinition.dataType) !==-1) {
        valueCmp = cm.add({
            key: 'value',
            component: _imports.DateInputs.DateInput,
            $parent: $parent,
            options:{
                format:'yyyy-mm-dd',
                label: t`Value`
            }
        }, true);
    }

    return valueCmp;

}

/**
 * 
 * @param {object} op options
 * @param {array<object>} op.attributesDefinition
 * @param {object} op.apply apply button properties
 */
function DataFilter(op = {}) {
    
    this.op = op;
    this.cm = new _imports.ComponentManager.default();
    const $el = $('<div/>');
    this.$el = () => $el;

    const t = _imports.utils.t;

    const orderByColumns = [];  //TODO: orderBy

    this.fields = {};

    this.op.attributesDefinition.map(a => {
        const key = a.key_name_id;
        const label = a.t_name_id || a.key_name_id;

        ['integer', 'short', 'text', 'date', 'timestamp'].indexOf(a.key_data_type_id) !== -1 && orderByColumns.push([key,label]);

        this.fields[a.key_name_id] = {
            label: label,
            name_id: a.name_id,
            dataType: a.key_data_type_id,
            ref: a.ref
        };

    })

    if (op.$filter) {
        op.$filter.on('click', () => this.showFilterModal());
    }
    else {
        const filterBtn = new _imports.Button.default({
            label: op.iconOnly === true ? null : `Data filter`,
            iconClass: 'filter',
            classes: 'btn-lg',
            onClick: () => this.showFilterModal()
        });
        
        $el.append(filterBtn.$el());
    }

    const cm1 = new _imports.ComponentManager.default();
    let valueCmp = null;
    let conditionCmp = null;

    const $valueContainer = $('<div/>');

    const tableCmp = this.tableCmp = new _imports.SimpleTable.default({
        attributes: [
            {
                t_name_id:t`Operator`
            },
            {
                t_name_id:t`Field`,
                key_data_type_id:'code_list_reference'
            },
            {
                t_name_id:t`Condition`
            },
            {
                t_name_id:t`Value`,
                key_data_type_id:'code_list_reference'
            }
        ],
        language: _app_globals__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].language
    });

    tableCmp.codeListValues = {};

    tableCmp.$el().on('click', '.operator', function() {
        const $this = $(this);
        const oldText = $this.text();
        $this.text(oldText === t`AND` ? t`OR` : t`AND`);

        /**
         * Get rowIndex and modify tableCmp.data
         */
        const $row = $this.parent().parent();
        const rowIndex = $row[0].rowIndex;
        tableCmp.data[rowIndex-1][0] = this.outerHTML;
    });

    this.modal = new _imports.ModalDialog.default();
    const fieldCmp = new _imports.Select2.default({
        label: t`Field`,
        data: this.op.attributesDefinition.map(a => [a.key_name_id, this.fields[a.key_name_id].label]),
        onSelect: async e => {
            if (!e) return;
            const selectedField = fieldCmp.val();
            const fieldDefinition = this.fields[selectedField];
            valueCmp = await valueFieldManager(this, fieldDefinition, cm1, $valueContainer);
            conditionFieldManager(fieldDefinition, conditionCmp); 
        }
    });

    conditionCmp = new _imports.Select2.default({
        label: t`Condition`,
        data: []
    });

    const button = new _imports.Button.default({
        label: t`Add`,
        iconClass: 'plus',
        style: 'float:right',
        onClick: () => {
            const selectedField = fieldCmp.val();
            const fieldDefinition = this.fields[selectedField];

            tableCmp.codeListValues[selectedField] = {key: fieldCmp.text()};

            let value = null;

            if (['code_list_reference', 'table_reference'].indexOf(fieldDefinition.dataType) !==-1) {
                const id = valueCmp.val();

                if (fieldDefinition.dataType === 'code_list_reference') {
                    tableCmp.codeListValues[id] = this.op.refValues.codeListValues.find(r => r.id == id);
                    value = id;
                }
                else if (fieldDefinition.dataType === 'table_reference') {
                    const _id_list_id = id + '_' + fieldDefinition.ref;
                    tableCmp.codeListValues[_id_list_id] = this.op.refValues.tableReferences.find(r => r._id_list_id == _id_list_id);
                    value = _id_list_id;
                }   
            }
            else {
                value = valueCmp.val();
                tableCmp.codeListValues['__value_'+value] = {key: value};
            }
            const operator = tableCmp.val().length === 0 ? '' : t`AND`;
            tableCmp.add([`<a class="operator" href="#">${operator}</a>`, selectedField, conditionCmp.val(), value]);
            this.$el().trigger('change');
        }
    });

    this.modal.$body.append(fieldCmp.$el());
    this.modal.$body.append(conditionCmp.$el());
    this.modal.$body.append($valueContainer);
    this.modal.$body.append(button.$el());
    this.modal.$body.append(tableCmp.$el());

    if (op.apply && op.apply.button) {
        const button = new _imports.Button.default({
            label: op.apply.button.label || t`Apply`,
            style: 'float:right',
            onClick: () => op.apply.callback && op.apply.callback()
        });

        const resetButton = new _imports.Button.default({
            label: t`Reset`,
            style: 'float:right',
            onClick: () => {
                this.val([]);
                op.apply.callback && op.apply.callback();
            }
        });
        
        this.modal.$footer.append(button.$el());
        this.modal.$footer.append(resetButton.$el());
    }
}

DataFilter.prototype.showFilterModal = function() {
    this.modal.show();
}

DataFilter.prototype.val = function(filterValue) {
    if (filterValue !== undefined) {

        this.tableCmp.val([]);

        filterValue.map(row => {
            const selectedField = row[0];

            const fieldDefinition = this.fields[selectedField];

            this.tableCmp.codeListValues[selectedField] = {key: fieldDefinition.label};

            let id = row[row.length - 1];

            if (['code_list_reference', 'table_reference'].indexOf(fieldDefinition.dataType) !==-1) {
                let clTable, clKey;
                
                if (fieldDefinition.dataType === 'code_list_reference') {
                    clTable = 'codeListValues';
                    clKey = 'id';
                }
                else {
                    clTable = 'tableReferences';
                    clKey = '_id_list_id'
                    id = id + '_' + fieldDefinition.ref;
                    row[row.length - 1] = id;
                }
                
                this.tableCmp.codeListValues[id] = this.op.refValues[clTable].find(r => r[clKey] == id);
            }
            else {
                this.tableCmp.codeListValues[id] = {key: id.replace('__value_','')};
            }

            this.tableCmp.add(row);
        });
        return;
    }

    const conditions = this.tableCmp.val();

    const out = [];

    conditions.map(row => {
        row = [...row];
        const $operator = $(row[0]);
        const operatorText = $operator.text();
        row[0] = operatorText ? (operatorText === t`AND` ? 'AND' : 'OR') : '';

        const field = row[1];
        const fieldDefinition = this.fields[field];
        if (this.fields[field].dataType === 'table_reference') {
            row[row.length-1] = row[row.length-1].replace('_' + fieldDefinition.ref, '');
        }
        out.push(row);
    });

    return out;
}  

/* harmony default export */ __webpack_exports__["default"] = (DataFilter);

/***/ })

}]);
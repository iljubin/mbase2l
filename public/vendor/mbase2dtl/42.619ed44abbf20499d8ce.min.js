(window["webpackJsonpmbase2modules"] = window["webpackJsonpmbase2modules"] || []).push([[42,74],{

/***/ 122:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "moduleRecordLink", function() { return moduleRecordLink; });
/* harmony import */ var _libs_exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _app_globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);
/* harmony import */ var _libs_record__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(19);



/**
 * @param {object} op options
 * @param {function} op.onLinkSelected callback function
 * @param {jQuery DOM object} op.$parent component container
 */
/* harmony default export */ __webpack_exports__["default"] = (async op => {
    const [
        Select2,
        recordsTable,
        mutils,
        utils,
        ComponentManager
    ] = await Promise.all([
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["Select2"](),
        __webpack_require__.e(/* import() */ 1).then(__webpack_require__.bind(null, 10)),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["mutils"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["utils"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["ComponentManager"]()
    ]);

    const t = _app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].t;

    const {$parent} = op;

    //select

    let selectCmp = null;

    const tableCm = new ComponentManager.default();

    selectCmp = new Select2.default({
            data: [['dmg',t`Damages on human property`],['sop', t`Signs of presence`]],
            label: t`Select module to link with`,
            onSelect: async () => {
                if (!selectCmp) return;
                const tname = selectCmp.val();
                if (!tname) return;
                await initTable(tname);
            }
        });

    $parent.html(selectCmp.$el());

    ///table
    const $tableDiv = $('<div/>');

    $parent.append($tableDiv);

    //await initTable('dmg');

    async function initTable(tname) {

        let attributes = [mutils.createVariableDefinition('__linked', t`Linked sample IDs`,'jsonb')];
        
        if (tname === 'dmg') {
            attributes = [...attributes,
                mutils.createVariableDefinition('_claim_id', t`Claim ID`, 'text'),
                mutils.createVariableDefinition('_dmg_start_date', t`Date`, 'date'),
                mutils.createVariableDefinition('_genetic_samples', '_genetic_samples', 'jsonb')
            ];
        }
        else if (tname === 'sop') {
            attributes = [...attributes,
                mutils.createVariableDefinition('event_date', t`Date`, 'date'),
                mutils.createVariableDefinition('_genetics', '_genetics', 'jsonb')
            ];
        }
            
        const recordsTableOptions = await mutils.generalTableRecordsOptions($tableDiv, tname, attributes);
        recordsTableOptions.btn_add_record = false;
        recordsTableOptions.btn_batch_import = false;

        recordsTableOptions.tableOptions = {
            scrollY: 'calc(75vh - 100px)'
        }

        recordsTableOptions.cm = tableCm;

        const queryParams = getQueryParams(tname);

        recordsTableOptions.url = _app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot + `/mb2data/${tname}?`+queryParams;
        
        const sampleTypeOptions = tname === 'dmg' ? await mutils.requestHelper(_app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot + `/code_list_options?:list_key=sample_type_options`) : null;

        const linked = await mutils.requestHelper(_app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot + `/mb2data/gensam?:__select=id,module_link->>'id' as module_link_id,sample_code&:__filter=[["module_link->>'tname'","=","${tname}"]]`);
        const linksByModuleRecordId = {};
        linked.map(linkedSample => {
            if (!linksByModuleRecordId[linkedSample.module_link_id]) linksByModuleRecordId[linkedSample.module_link_id] = [];
            linksByModuleRecordId[linkedSample.module_link_id].push(`${linkedSample.sample_code?linkedSample.sample_code+' ' : ''}(ID: ${linkedSample.id})`);
        })

        recordsTableOptions.preprocessTableData = (data, model) => {
            
            data.map(row => {
                if (linksByModuleRecordId[row.id]) {
                    row.__linked = linksByModuleRecordId[row.id].join('<br>');
                }
            });

            if (tname==='dmg') {
                preprocess_dmg_table_data(data);
            }
            else if (tname==='sop') {
                preprocess_sop_table_data(data);
            }

            return data;
        }

        recordsTableOptions.onRowSelected = (data) => {
            const out = {};
            out.tname = tname;
            out.id = data.id;
            
            if (tname==='dmg') {
                out.event_date = data._dmg_start_date;
                out._claim_id = data._claim_id;
            }
            else if (tname==='sop') {
                out.event_date = data.event_date;
            }

            out._location_data = data._location_data;

            op.onLinkSelected && op.onLinkSelected(out);
        }

        recordsTableOptions.externalEditRecord = (row, rowId, rowIndex) => {
            window.open(moduleRecordLink(tname, row.id), '_blank');
        }

        await recordsTable.default(recordsTableOptions);

        function getQueryParams(tname) {
            if (tname==='dmg') {
                return ':__select=id,_claim_id,_genetic_samples,_dmg_start_date,_location_data&:__filter=[["_genetic_samples","<>","[]"],["_genetic_samples","is not","null"]]'
            }
            else if (tname==='sop') {
                return ':__select=id,_genetics,event_date,_location_data&:__filter=[["_genetics","<>","[]"],["_genetics","is not","null"]]' 
            }     
            
        }

        function preprocess_dmg_table_data(data) {
            const lang = _app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].language;
            for (const op of sampleTypeOptions) {
                op.translations = JSON.parse(op.translations);
            }
            const sampleTypeOptionsById = utils.convertToAssocArray(sampleTypeOptions);

            for(const row of data) {
                const sdata = JSON.parse(row._genetic_samples);
                const out = [];

                for (const s of sdata) {
                    let type = '';
                    if (s[1]) {
                        type = sampleTypeOptionsById[s[1]];
                        type = type.translations[lang] || type.key;
                    }

                    out.push(`<b>ID</b>: ${s[0]}, <b>${t`type`}</b>: ${type}, <b>${t`note`}</b>: ${s[2]}`);
                }
                row._genetic_samples = out.join('<br>');
            }
        }

        function preprocess_sop_table_data(data) {

            for(const row of data) {
                const sdata = JSON.parse(row._genetics);
                const out = [];

                for (const s of sdata) {
                    out.push(`<b>ID</b>: ${s[0]}, <b>${t`note`}</b>: ${s[2]}`);
                }
                row._genetics = out.join('<br>');
            }
        }
    }
});

function moduleRecordLink(tname, id) {
    let urlName = null;

    if (tname === 'dmg') {
        urlName = 'zahtevek';
    }
    else if (tname ==='sop') {
        urlName = 'sign';
    }
    return window.location.origin + `/mbase2/modules/${tname}/`+urlName+'?fid='+id;
}

/***/ }),

/***/ 19:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);


/**
 * Translation form
 * 
 * @param {object} op
 * @param {object} op.$parent a jQuery $container for the form
 * @param {object} op.cm ComponentManager object instance
 * @param {array|object} op.refValues values referenced by the attributes that are shown in select element; if array is passed as argument it gets converted to associative object of arrays based on 'id' property
 */

/* harmony default export */ __webpack_exports__["default"] = (async op => {    

    const [
        utils, 
        mutils,
        ComponentManager,
        Button
    ] = await Promise.all([
        _exports__WEBPACK_IMPORTED_MODULE_0__["utils"](),
        _exports__WEBPACK_IMPORTED_MODULE_0__["mutils"](),
        _exports__WEBPACK_IMPORTED_MODULE_0__["ComponentManager"](),
        _exports__WEBPACK_IMPORTED_MODULE_0__["Button"]()
    ]);

    const t = utils.t;

    const attributes = op.cm.model.attributes = utils.convertToAssocArray(op.cm.model.attributes, 'key_name_id');

    const {componentDefinitions, definitionAliases} = (await __webpack_require__.e(/* import() */ 3).then(__webpack_require__.bind(null, 14)));
    const importDefinitions = componentDefinitions(_exports__WEBPACK_IMPORTED_MODULE_0__);
    const aliases = definitionAliases(utils.patterns);
    
    const {$parent} = op;

    /** if container is modal window it can have $body, $title and $footer parts */
    const $body = $parent.$body || $parent;
    const $title = $parent.$title;
    const $footer = $parent.$footer;

    const cm = op.cm || new ComponentManager.default();
    
    for (const key of Object.keys(attributes)) {
        const v = attributes[key];
        if (v.visible===false) continue;
        const cdef = await mutils.getComponentDefinition(v, importDefinitions, aliases, op.refValues, true, $body);
        cdef.key = key;
        cdef.$parent = $body;
        const cmp = await cm.add(cdef);
        if (v._component && v._component.onComponentAdded) v._component.onComponentAdded(cmp);
    };

    await cm.add({
        key: 'btn_save',
        component: Button.default,
        options: {
            label: t`Save`, 
            classes: 'btn-primary btn-lg',
            style:'float:right',
            onClick: op.onSave ? () => op.onSave(cm) : onSave //create new button for every module change otherwise onSave holds the initial options
        },
        $parent: $footer || $body
    }, true);

    if (op.onInit) {
        op.onInit(cm);
    }

    let add;
    if (cm.model.values && cm.model.values[cm.model.primaryKey]) {
        $title && (op.title ? $title.html(op.title) : $title.text(t`Edit record`));
        cm.updateComponentsValue();
        add = false;
    }
    else {
        add = true;
        $title && (op.title ? $title.html(op.title) : $title.text(t`New record`));
        initComponentsSelectedValues();
    }

    cm.saveOptions.onSuccessCallbacks = [onSuccessfullySaved];
    if (op.saveCallbacks) {
        cm.saveOptions.onSuccessCallbacks = [...cm.saveOptions.onSuccessCallbacks, ...op.saveCallbacks];
    }

    if (op.saveOptions && op.saveOptions.onSuccessCallbacks) {
        cm.saveOptions.onSuccessCallbacks = [...cm.saveOptions.onSuccessCallbacks, ...op.saveOptions.onSuccessCallbacks];
    }

    const saveOptions = Object.assign(await mutils.saveButtonHelper(op.saveOptions), op.saveOptions || {});

    function initComponentsSelectedValues() {
        if (cm.model.select) {
            cm.model.select.map(s => {
                const c = cm.get(s.key);
                c && c.val(s.value);
            });
        }

        if (cm.model.values) {
            Object.keys(cm.model.values).map(key => {
                const c = cm.get(key);
                c && c.val(cm.model.values[key]);
            })
        }
    }

    function onSuccessfullySaved(cm, result, model) {
        op.onSuccessfullySaved && op.onSuccessfullySaved(cm, result, model);
        
        if (add === true) {
            cm.val(null);
            cm.model.values = null;
            initComponentsSelectedValues();
        }
    }
    
    function onSave() {
        op.beforeSave && op.beforeSave(cm);
        cm.save(saveOptions);
    }

    function onDataFileSelect(e) {
        if (!fileUploadCm) return;
        console.log(fileUploadCm.get('select').val())
    }
});

/***/ })

}]);
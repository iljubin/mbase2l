(window["webpackJsonpmbase2modules"] = window["webpackJsonpmbase2modules"] || []).push([[89],{

/***/ 86:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _libs_exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _app_globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);



/* harmony default export */ __webpack_exports__["default"] = (async op => {
    const [
        utils,
        mutils,
        Mbase2Module,
        TSelect2,
        DropDown,
        ComponentManager,
        Accordion,
        Storage,
        TTomSelect
        
    ] = await Promise.all([
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["utils"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["mutils"](),
        __webpack_require__.e(/* import() */ 6).then(__webpack_require__.bind(null, 25)),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["Select2"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["DropDown"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["ComponentManager"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["Accordion"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["Storage"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["TTomSelect"]()
    ]);

    const t = utils.t;

    let m = null;

    let $sampleTypePropertiesElement = null;

    let $completeBtn = null;

    const mediaRootFolder = '/private/gensam';

    m = new Mbase2Module.default({
        onRefreshStatus: onRefreshStatus,
        localStorageTemplateKey: "gensam-sample-template",
        tableName: 'gensam',
        moduleKey: 'gensam',
        viewName: 'gensam_vw',
        rootRelativePath:'genetics/samples',
        title: t`Genetic samples`,
        $parent: op.$parent,
        subtitle: {
            new: t`new`,
            edit: t`edit`,
        },
        sectionContainer: 'div',
        sectionContainerOverrides: {
            _location_data: 'acc',
            _photos: 'acc'
        },
        buttons: [   
            {
                key: 'new',
                label: utils.t`New`
            },  
            {
                key: 'edit',
                label: utils.t`Edit`,
                visible: false,
                onClick: (that) => {
                    that.save('save', 'uncomplete');
                }
            },  
            {
                key: 'save-and-new',
                label:t`Complete & Save & New`,
                title: t`Complete and save this entry and start a new one`,
                onClick: (that) => {
                    
                    if (that.sectionsValidated()) {
                        if (that._initialData.completed === true) {
                            alert(t`Error: the record is already completed.`);
                            return;
                        }

                        that.save('save', 'complete');
                    }
                }
                
            },
            {
                key: 'save',
                label: utils.t`Save`
            }
        ],
        onBeforeRequest: (key, request, cm, additionalAction=null) => {
            if (key!=='save') return;
            
            if (additionalAction === 'complete') {
                request.attributes[':completed'] = true;
            }
            else if (additionalAction === 'uncomplete') {
                request.attributes = {
                    ':completed':false
                };
            }

            request.attributes[':_uid'] = ':_sample_entry_clerk_uid';   //this is necessary for the backend to add current user name to the database
        },
        skipVariables: ['_batch_id', '_uid','_uname','_location', '_sample_entry_clerk_uid','date_record_created', 'date_record_modified'],
        skipDefaultVariables: true,
        componentOrder: [
            
        ],
        componentOverrides: {
            sample_code:sample_code,
            samplers:samplers,
            module_link: module_link
        },
        hideComponents: ['sample_properties'],  //this prevents bookmark creation
        componentDefinitionOverrides: {
            sample_properties: {
                component: Storage,
                additionalComponentOptions: {
                    returnNullWhenEmpty:true
                }
            },
            _location_data: {
                additionalComponentOptions: {
                    defaultSpatialRequest: {
                        apiRoot: _app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot
                    },
                    revert: true,
                    distanceFromSettlement: false,
                    localName: true,
                    locationType: true,
                    confirmChange: true,
                    onSpatialRequestFinished: res=>{
                        m.refreshState();
                    }
                }
            },
            _sample_type: {
                additionalComponentOptions: {
                    onSelect: onSampleTypeSelected
                }
            }
        },

        beforeInitSections: async (self) => {
            
            const $generalData = await  mutils.addSingleAccordionPanel(self.cm, _libs_exports__WEBPACK_IMPORTED_MODULE_0__, t`General data`, '_general_data_section_container', self.$right);

            const $fieldData = await  mutils.addSingleAccordionPanel(self.cm, _libs_exports__WEBPACK_IMPORTED_MODULE_0__, t`Field data`, '_field_data_section_container', self.$right);

            const $labdData = await  mutils.addSingleAccordionPanel(self.cm, _libs_exports__WEBPACK_IMPORTED_MODULE_0__, t`Laboratory data`, '_lab_data_section_container', self.$right);

            self.variableParents = {};

            const variableParents = {
                'sample_code': $generalData,
                'second_lab_code': $generalData,
                '_location_data': $fieldData,
                '_sample_entry_clerk_uid': $fieldData,
                'study': $generalData,
                'data_quality': $generalData,
                'organisation': $generalData,

                '_sample_collection_method':$fieldData,
                '_sample_type':$fieldData,
                '_notes':$fieldData,
                '_notes_to_lab':$generalData,
                '_species_name':$fieldData,
                '_licence_name':$generalData,
                'event_date': $fieldData,
                'samplers': $fieldData,
                'module_link': $fieldData,

                '_data_quality': $labdData,
                'lab_notes': $labdData,
                'extraction_date': $labdData
            };

            Object.keys(variableParents).map(key => {
                    self.variableParents[key] = variableParents[key];
            });
            
            const $generalDataAttributes = await mutils.addSingleAccordionPanel(self.cm, _libs_exports__WEBPACK_IMPORTED_MODULE_0__, 'General data attributes', 'General data attributes', self.$left);
            const $fieldDataAttributes = await mutils.addSingleAccordionPanel(self.cm, _libs_exports__WEBPACK_IMPORTED_MODULE_0__, 'Field data attributes', 'Field data attributes', self.$left);
            const $labDataAttributes = await mutils.addSingleAccordionPanel(self.cm, _libs_exports__WEBPACK_IMPORTED_MODULE_0__, 'Lab data attributes', 'Lab data attributes', self.$left);

            $generalData.$bookmarkContainer = $generalDataAttributes;
            $fieldData.$bookmarkContainer = $fieldDataAttributes;
            $labdData.$bookmarkContainer = $labDataAttributes;

            self.$left.css('padding-top','10px').css('padding-right','10px');
        },
        onSaveSuccessCallback: onSaveSuccessCallback,
        beforeHeaderIsCreated: beforeHeaderIsCreated,
        onComponentAppended:onComponentAppended
    });

    await m.init();

    const cmp = m.cm.get('acc__location_data');
    cmp.$el().css('margin-top','10px');

    $('.extended-title').css({'color':'#0088ce','font-weight':'bold'});

    const dropDown = new DropDown.default({
        classes: 'btn-lg',
        items: [
            {
                key: 'save-template',
                label: t`Save template`
            },
            {
                key: 'reset-template',
                label: t`Reset template`
            }
        ],
        label: _app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].t`Template`,
        onClick: ({key}) => {
                if (key === 'save-template') {
                    const values = JSON.parse(JSON.stringify(m.cm.val()));
                    
                    if (values.sample_code !== undefined) {
                        delete values.sample_code;
                    }
                    
                    localStorage.setItem("gensam-sample-template", JSON.stringify(values));
                    $.toaster({ message : t`Template data successfully saved.` });
                }
                else if (key === 'reset-template') {
                    localStorage.removeItem('gensam-sample-template')
                    $.toaster({ message : t`Template data successfully reset.` });
                }
                return false;
            }     
    });

    m.$buttonGroupContainer.css('display', 'flex');
    m.$buttonGroupContainer.prepend(dropDown.$el());

    m.group.buttons.map(b => b.$btn.css('margin-left', '10px'));

    $completeBtn = m.group.buttons.find(b => b.key === 'save-and-new').$btn;

    m.refreshState();

    function $createSampleTypePropertiesElement($el) {

        const acc = new Accordion.default({$parent: $el, closeOthers: true});
        const key = t`Sample properties`;
        acc.addPanel(key);
        return acc.getPanel(key).$body;
    }

    async function onSampleTypeSelected() {
        const cmp = m.cm.get('_sample_type');
        if (!cmp) return;
        //get key from id
        const id = cmp.val();
        const data =$(cmp.getOptionByValue(id)).data(); //code list option key is stored in data-additional attribute of the select box
        const sampleType = data.additional;

        const attributes = await mutils.requestHelper(_app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot + `/module_variables/language/${_app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].language}?:module_id:code_list_options/key=gensam_${sampleType}_properties`);
        const refValues = await mutils.getRefCodeListValues(attributes);

        $sampleTypePropertiesElement = $sampleTypePropertiesElement || $createSampleTypePropertiesElement(cmp.$el().parent());
        m.cm.get('sample_properties').val({});
        const samplePropertiesCm = new ComponentManager.default({
            onComponentChange: (key, _value, _cm) => {  //called on single item change
                const cmp = m.cm.get('sample_properties');
                const value = cmp.val() || {};
                value[key] = _value;
                cmp.val(value); //store samplePropertiesCm values to the overriden sample_properties component
                m.cm.op.onComponentChange(key, value, m.cm);
            }
        });

        $sampleTypePropertiesElement.empty();
        await mutils.createFormElements(samplePropertiesCm, $sampleTypePropertiesElement, attributes, refValues);

        if (m._initialData.sample_properties) {
            samplePropertiesCm.val(utils.jsonParse(m._initialData.sample_properties), false);
        }
    }

    function onRefreshStatus($status, cm) {
        const keys = Object.keys(cm.model.attributes);

        let requiredAttributesCompleted = true;

        for (const key of keys) {
            if (!cm.model.attributes[key].required) continue;
            const value = cm.get(key).val();

            if (value === undefined || value === null || (value.trim && value.trim()===''))  {
                requiredAttributesCompleted = false;
                break;
            }
        }

        if (requiredAttributesCompleted) {
            $status.html($(`<span class="label label-success">${t`All required attributes are entered.`}</span>`));
            $completeBtn && $completeBtn.prop('disabled', false);
        }
        else {
            $status.html($(`<span class="label label-warning">${t`Some required attributes are not entered.`}</span>`));
            $completeBtn && $completeBtn.prop('disabled', true);
        }

        const edit = m.group.buttons.find(btn => btn.key === 'edit');
        const save = m.group.buttons.find(btn => btn.key === 'save');
        const saveAndNew = m.group.buttons.find(btn => btn.key === 'save-and-new');

        if (m._initialData['completed'] === true) {
            $status.append($(`<span class="label label-info">${t`This record is COMPLETED. For editing you have to unlock it.`}</span>`));
            $('.panel-group').addClass('disable-mouse-events');
            edit.$btn.show();
            save.$btn.prop('disabled', true);
            saveAndNew.$btn.hide();
        }
        else {
            edit.$btn.hide();
            saveAndNew.$btn.show();
            //save.$btn.prop('disabled', false)
            $('.panel-group').removeClass('disable-mouse-events');
            $status.append($(`<span class="label label-danger">${t`This record is UNCOMPLETED.`}</span>`));
        }
    }

    /**
     * Variable component override
     * 
     * @param {object} $container jQuery object for the component's container
     * @param {object} cm ComponentManager of the form
     * @param {string} key variable key in the form
     */

    async function samplers($container, cm, key) {
        
        const variableDefinition = m.variables.find(v => v.key_name_id === key);

        const samplersOptions = m.refValues.tableReferences.filter(r=>r.list_key==='gensam_samplers').map(r => [r.id, r.key]);

        await cm.add({
            key: key,
            component: TSelect2.default,
            options: {
                tags: true,
                multiple: true,
                required: true,
                data: samplersOptions,
                label: variableDefinition.t_name_id || variableDefinition.key_name_id,
                onSelect: (e) => {
                    if (!e) return;
                    if (!e.params) return;
                    if (!e.params.data.newOption) return;
                    personUpsert(e.params.data);
                },
                newOptionText:'<b>' + t`New entry (sampler's name)` + '</b>',
                templateSelection: function (data) {
                    var $a = $('<a href="#"></a>');
                    $a.text(data.text);
                    data.$a = $a;
                    $a.on('click', () => {
                        personUpsert(data);
                        return false;
                    })
                    return $a;
                }
            
            },
            $parent: $container
        }, true);
    }

    async function personUpsert(data) {
        const cmr = new ComponentManager.default();

        if (data.newOption && data.text) {
            cmr.model.values = {
                _full_name: data.text
            }
        }
        else {
            const _samplers = await mutils.requestHelper(_app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot + `/mb2data/gensam_samplers/${data.id}`);
            cmr.model.values = _samplers[0];
        }

        cmr.model.attributes = [
            {
                'key_name_id': '_full_name',
                'key_data_type_id': 'text'
            },
            {
                'key_name_id': 'contact_data',
                'key_data_type_id': 'text'
            }
        ];
    
        cmr.model.tableName = 'gensam_samplers';

        const dialog = await __webpack_require__.e(/* import() */ 47).then(__webpack_require__.bind(null, 121));
        dialog.default(cmr);
    }

    async function module_link($container, cm, key) {

        cm.add({
            key: 'module_link',
            component: Storage.default,
            options: {
                returnNullWhenEmpty: true
            }
        });

        const $div = $('<div/>', {style:"display: flex; justify-content: space-between"});
        const $msgLinkDiv = $('<div/>');
        const $btn = $('<button type="button" class="btn btn-default btn-xs" style="height:100%">'+t`Link to other MBASE module`+'</button>');
        $div.append($msgLinkDiv);
        $div.append($btn);
        $container.html($div);

        if (m._initialData && m._initialData.module_link && m._initialData.module_link.id) {
            refreshModuleLinkData(m._initialData.module_link);
        }

        const moduleLinkSelector = await __webpack_require__.e(/* import() */ 42).then(__webpack_require__.bind(null, 122));

        $btn.on('click', async function () {
            const ModalDialog = await _libs_exports__WEBPACK_IMPORTED_MODULE_0__["ModalDialog"]();
            const modal = new ModalDialog.default({
                onShown: () => {
                    moduleLinkSelector.default({
                        $parent: modal.$body,
                        onLinkSelected: (data) => {
                            modal.hide();

                            console.log(cm, data._location_data)
                            cm.get('_location_data').val(utils.jsonParse(data._location_data));

                            cm.get('event_date').val(data.event_date);

                            delete data._location_data;
                            delete data.event_date;

                            cm.get('module_link').val(data);

                            cm.get('_location_data').$el().addClass('disable-mouse-events');
                            cm.get('event_date').$el().addClass('disable-mouse-events');

                            refreshModuleLinkData(data);
                        }
                    })
                }
            });
    
            modal.show();
        });

        function refreshModuleLinkData(data) {

            let additional = [];

            for (const [key, value] of Object.entries(data)) {
                if (['tname', 'id'].indexOf(key) === -1) {
                    additional.push(`${key}: ${value}`);
                }
            }

            additional = additional.join(',');
            additional = additional ? ', ' + additional : '';

            const msg = `${t`This record is linked to the following other module record`}: <a id="module-link" href="#"><b>${data.tname}</b> (ID: ${data.id}${additional})</a>.<br>
            The date and coordinates of the sample are thus taken from the linked module record and cannot be edited via this form.`;

            $msgLinkDiv.html(mutils.alertCode(msg,'','info'));

            $msgLinkDiv.find('#module-link').on('click', () => {
                window.open(moduleLinkSelector.moduleRecordLink(data.tname, data.id), '_blank');
            });
        }
    }

    async function sample_code($container, cm, key) {
        //get translated label for the component
        const variableDefinition = m.variables.find(v => v.key_name_id === key);

        const id_sample_code = await mutils.requestHelper(_app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot + `/mb2data/${m.op.viewName}?:__select=id,sample_code`);

        const idBySampleCode = {};

        id_sample_code.map(row => {
            const scode = row.sample_code && row.sample_code.trim();
            if (scode) {
                idBySampleCode[scode] = row.id;
            }
        });

        await cm.add({
            key: key,
            component: TTomSelect.default,
            options: {
                configurationOverrides: {
                    create: true
                },
                required: true,
                data: Object.keys(idBySampleCode).map(sampleCode => [sampleCode, sampleCode]),
                label: variableDefinition.t_name_id || variableDefinition.key_name_id,
                onSelect: (value, addedOption) => {

                    if (!addedOption) { //load existing
                        const fid = idBySampleCode[value];
                        if (fid) {
                            window.location = window.location.origin + window.location.pathname+'?fid='+fid
                        }
                    }
                    else {
                        m.fid && m._initialData && m._initialData.sample_code && m.copy(null, false); //if new sample was entered in existing sample data form then copy form data
                    }
                }
            },
            $parent: $container
        }, true);

        const cmp = cm.get(key);
        cmp.$el().attr('id','sample-code-selector-placeholder');
        cmp.$el().find('.ts-dropdown input.dropdown-input').css('text-transform','uppercase');
        //!cmp.val() && cmp.tselect.open();
    }

    function onSaveSuccessCallback(res, key, additionalAction) {
        if (additionalAction === 'uncomplete') {
            window.location.reload();
            return;
        }
        else if (additionalAction === 'complete') {
            window.location = window.location.origin + window.location.pathname;
            return;
        }

        m.updateSubtitle(m.op.subtitle.edit + ' ' + (res.sample_code || ''));
    }

    function beforeHeaderIsCreated() {
        const r = {};
        
        if (m.fid) {
            const c = m._initialData && m._initialData.sample_code;
            if (c) {
                r.modifiedSubtitle = (m._initialData.completed === true ? '' : m.op.subtitle.edit) + ' ' + c;
            }
        }

        return r;
    }

    function onComponentAppended(key, component, cm) {
        /**
         * disable date and location components if module_link is set
         */
        if (['event_date', '_location_data'].indexOf(key) !==-1) {
            if (m._initialData && m._initialData.module_link) {
                component.$el().addClass('disable-mouse-events');
            }
        } 
    }
});

/***/ })

}]);
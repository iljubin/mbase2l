(window["webpackJsonpmbase2modules"] = window["webpackJsonpmbase2modules"] || []).push([[40],{

/***/ 27:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony default export */ __webpack_exports__["a"] = (`
  <div id="template" class="file-row">
    <!-- This is used as the file preview template -->
    <div>
        <span class="preview"><img data-dz-thumbnail /></span>
    </div>
    <div>
        <p class="name" data-dz-name></p>
        <strong class="error text-danger" data-dz-errormessage></strong>
    </div>
    <div>
        <p class="size" data-dz-size></p>
        <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0">
          <div class="progress-bar progress-bar-success" style="width:0%;" data-dz-uploadprogress></div>
        </div>
    </div>
    <div>
      <button class="btn btn-primary start" style="display:none">
          <i class="glyphicon glyphicon-upload"></i>
          <span>Start</span>
      </button>
      <button data-dz-remove class="btn btn-warning cancel">
          <i class="glyphicon glyphicon-trash"></i>
          <span>Remove</span>
      </button>
      <button data-dz-remove class="btn btn-danger delete">
        <i class="glyphicon glyphicon-trash"></i>
        <span>Delete</span>
      </button>
    </div>
  </div>
`);

/***/ }),

/***/ 77:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _libs_exports__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _app_globals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(0);
/* harmony import */ var _libs_components_DropzoneTemplates_blueimp__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(27);




/* harmony default export */ __webpack_exports__["default"] = (async op => {

    const {$parent} = op;

    const [
        utils,
        mutils,
        DataFilter,
        Button,
        RadioButtonSelector,
        MediaScroller,
        ModalDialog,
        DropzoneLoader,
        ComponentManager,
        Inputs,
        DataOrder,
        Alert,
        variables,
        Map
    ] = await Promise.all([
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["utils"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["mutils"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["DataFilter"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["Button"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["RadioButtonSelector"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["MediaScroller"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["ModalDialog"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["DropzoneLoader"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["ComponentManager"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["Inputs"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["DataOrder"](),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["Alert"](),
        __webpack_require__.e(/* import() */ 82).then(__webpack_require__.bind(null, 120)),
        _libs_exports__WEBPACK_IMPORTED_MODULE_0__["Map"]()
    ]);

    const t = utils.t;

    let map = null;
    let dataTable = null;
    let fileTable = null;

    let groupCmp;
    let selectedMedia=[];
    let uploadBtn;
    let mediaScroller, info;
    let changeTableRecordSetFunction = null;
    let changeFileTableRecordSetFunction = null;

    let processedImages = {}; //the images processed in the current unpreocessed images window - this is needed to show image attributes when clicked in the unprocessed window

    const mediaRootFolder = '/private/ct';

    const naslov = t`Camera Trapping`;
    const podnaslov = t`data overview`;

    const $btnGroup = $('<div/>',{style:"display: flex"});

    const _attributes = await mutils.getModuleVariables('ct', false);

    const attributes = variables.default(_attributes);

    const refValues = await mutils.getRefCodeListValues(attributes);

    const attributeKeysToBeSkipped = variables.attributeKeysToBeSkipped(attributes);

    const $header = mutils.moduleHeader(naslov, podnaslov, $btnGroup, null, null, null);
    $parent.append($header);

    const $left =  $('<div style="float: left;width:640px"/>');
    const $mediaScroller =  $('<div style="height:100%; max-height: calc(100vh - 280px); overflow-y: auto"/>');
    const $right = $('<div style="float: right; height:100%; width:calc(100vw - 680px); max-height: calc(100vh - 187px); border-left: solid black 1px; padding:10px"/>');
    $parent.append($left);
    $parent.append($right);

    const $leftToolbar = $('<div/>');

    const $imageTypeSelectorDiv = $('<div/>', {style:'display:flex;align-items:baseline'});

    $leftToolbar.append($imageTypeSelectorDiv);

    $left.append($leftToolbar);
    $left.append($mediaScroller);

    const imageTypeSelector = new RadioButtonSelector.default({
        classes: 'btn-lg',
        items: [{key: 0,label: t`Processed images`}, {key: 1, label: t`Uprocessed images`}],
        onChange: (item) => {
            const currentValue = item.key;
            onImageListAction({key: !currentValue ? 'load_processed' : 'load_unprocessed'});
            !currentValue ? $fileTable.hide() && $table.show() : $table.hide() && $fileTable.show();
        }
    });

    info = new Alert.default({type: 'info', sections: ['processed','selected']});
    $imageTypeSelectorDiv.append(info.$el());
    info.$el().css('width','100%');

    const $map = $('<div style="height:50vh"/>');
    const $table = $('<div style="height:calc(50vh - 190px)"/>')
    const $fileTable = $('<div style="height:calc(50vh - 190px)"/>')
    $fileTable.hide();
    $right.append($map);
    $right.append($table);
    $right.append($fileTable);

    await DataFilter.loadExports(_libs_exports__WEBPACK_IMPORTED_MODULE_0__);
    const dataFilter = new DataFilter.default({
        attributesDefinition: mutils.skipAttributes(attributes, attributeKeysToBeSkipped),
        refValues: refValues,
        additionalReferenceTableValues: true,
        apply: {
            button: true,
            callback: () => {
                
                if (dataFilter.val().length>0) {
                    dataFilter.$el().find('button > i').css('color','red');
                }
                else {
                    dataFilter.$el().find('button > i').css('color','inherit');
                }

                onImageListAction({key: !imageTypeSelector.val() ? 'load_processed' : 'load_unprocessed'});
            }
        }
    });

    console.log('dataFilter', dataFilter)

    uploadBtn = new Button.default({
        label:t`Upload images`,
        iconClass: 'upload',
        classes: 'btn-lg',
        onClick: () => {
            if (imageTypeSelector.val() == 0) {
                imageTypeSelector.val(1, false);
            }

            const loader = new DropzoneLoader.default({
                url: _app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot + '/file-upload' + mediaRootFolder,
                onComplete: onFileUploaded,
                autoProcessQueue: false,
                template: _libs_components_DropzoneTemplates_blueimp__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"]
            });

            const dlg = new ModalDialog.default({
                onClose: () => loader.dropzone.destroy()
            });

            dlg.$body.append(loader.$el());

            const uploadBtn = new Button.default({
                label:t`Upload`,
                onClick: () => {
                    loader.startUpload();
                    //loader.dropzone.processQueue();
                }
            });

            dlg.$footer.append(uploadBtn.$el());
            dlg.show();
        }
    });

    const selectNoneBtn = new Button.default({
        label:t`Select none`,
        iconClass: 'ban',
        classes: 'btn-lg',
        onClick: () => {
            mediaScroller.action('deselect');
        }
    });

    $imageTypeSelectorDiv.append(selectNoneBtn.$el());
    selectNoneBtn.$el().css('padding-left','15px');

    $btnGroup.append(imageTypeSelector.$el().css('padding-right', '15px').css('margin-top','-15px'));
    $btnGroup.append(dataFilter.$el().css('padding-right', '15px'));
    $btnGroup.append(uploadBtn.$el().css('padding-right', '15px'));

    const addRecordBtn = new Button.default({
        label:t`Add a record`,
        iconClass: 'plus',
        classes: 'btn-lg',
        onClick: () => {
            dataTable && dataTable.__editRecord && dataTable.__editRecord();
        }
    });

    const batchImportdBtn = new Button.default({
        label:t`Batch import`,
        iconClass: 'file',
        classes: 'btn-lg',
        onClick: () => {
            dataTable && dataTable.__editRecords && dataTable.__editRecords();
        }
    });

    const exportBtn = new Button.default({
        label:t`Export`,
        iconClass: 'download',
        classes: 'btn-lg',
        onClick: () => {
            utils.hrefClick(_app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot+'/export/ct', null);
        }
    });

    $btnGroup.append(addRecordBtn.$el().css('padding-right', '15px'));
    $btnGroup.append(batchImportdBtn.$el().css('padding-right', '15px'));
    $btnGroup.append(exportBtn.$el().css('padding-right', '15px'));

    /////////////////////////////
    const tableName = 'ct';

    //add onSelect to trap_station_name field
    const trapStationName = attributes.find(v => v.key_name_id === 'trap_station_name');
    trapStationName._component = {
        default: true,
        additionalComponentOptions: {
            onSelect: () => {}
        }
    };

    //hide columns
    ['_batch_id', 'camelot_sighting_id'].map(key => {
        const a = attributes.find(v => v.key_name_id === key);
        if (a) {
            a._component = {
                default: true,
                onComponentAdded: (cmp) => {
                    cmp.$el().hide();
                }
            }
        }
    });

    //change component root
    attributes.find(v => v.key_name_id === 'photos')._component = {
        default: true,
        additionalComponentOptions: {
            mediaRoot: _app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].mediaRoot + mediaRootFolder
        }
    }

    const uname = attributes.find(v => v.key_name_id === '_uname');
    uname._component = {
        import: () => _libs_exports__WEBPACK_IMPORTED_MODULE_0__["Storage"]()
    }

    const licenceNameIndex = attributes.findIndex(v => v.key_name_id === '_licence_name');
    attributes.push(attributes.splice(licenceNameIndex, 1)[0]); //move to the end of array

    /**
     * Processed images table
     */
    const dataTableRecordsOptions = await mutils.generalTableRecordsOptions($table, tableName, attributes, refValues);
    dataTableRecordsOptions.sortVariables = false;

    dataTableRecordsOptions.changeRecordSet = (_changeRecordSet) => {   //change recordset will be called manually
        changeTableRecordSetFunction = _changeRecordSet;
    }

    dataTableRecordsOptions.onInitRecord = onInitRecord;
    dataTableRecordsOptions.onEditRecord = onEditRecord;
    dataTableRecordsOptions.skipAttributesFromTable = ['camelot_sighting_id'];
    dataTableRecordsOptions.batchOptions = {
        model: {'ct':  attributes.filter(a => a.dbcolumn === true || a.dbcolumn === undefined).filter(a => ['_batch_id', '_uname', 'sighting_quantity'].indexOf(a.key_name_id) ===-1)}
    }

    dataTableRecordsOptions.tableOptions = {
        hideColumns: ['photos'],
        scrollY: 'calc(50vh - 300px)'
    }

    dataTableRecordsOptions.btn_batch_import = false;
    dataTableRecordsOptions.btn_add_record = false;

    dataTableRecordsOptions.skipId = true;
    dataTableRecordsOptions.skipAttributesFromTable = attributeKeysToBeSkipped;

    dataTableRecordsOptions.processTableData = (row, inx) => {

        row.photos = utils.jsonParse(row.photos);
        row.photos.map(photo => {
            row[photo] = true;
        });
        return row;
    };

    dataTableRecordsOptions.onTableCreated = (_table) => dataTable = _table;

    dataTableRecordsOptions.cm = new ComponentManager.default();

    dataTableRecordsOptions.saveOptions = {
        rootUrl: _app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot + '/mb2data',
        beforeRequest: (req, saveOptions) => {
            const photos = req.attributes[':photos'];
            if (photos.length > 1 && groupCmp.val() === false) {
                saveOptions.parseResult = res => res ? res.map(r => r[0]) : null;
                saveOptions.updateModelAfterSave = false;
                const attributes = [];
                photos.map(photo => {
                    const a = Object.assign({}, req.attributes);
                    a[':photos'] = [photo];
                    attributes.push(a);
                });
                req.method = 'POST';
                req.url = _app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot + '/mb2data/ct';
                req.attributes = attributes;
            }
            else {
                saveOptions.parseResult = (res) => res ? res[0] : null;
                saveOptions.updateModelAfterSave = true;
            }
        }
    }

    const model = dataTableRecordsOptions.cm.model;
    const initModelValues = () => ({
        '_licence_name':10,
        '_uname': true
    });
    
    model.values = initModelValues();

    /**
     * 
     * @param {ComponentManager} cm 
     * @param {object|array<object>} res result returned from the insert/update 
     */

    dataTableRecordsOptions.onSuccessfullySaved = async (cm, res, model) => {
        if (imageTypeSelector.val()) {  //unprocessed images
            let photos = res.photos.map ? res.photos : JSON.parse(res.photos);
            photos.map(photo => {
                processedImages[photo] = true;
            })
        }

        if (Array.isArray(res) && res.length > 1 && groupCmp.val() === false && model.values.id) {
            const res = await mutils.requestHelper(_app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot + '/mb2data/ct/'+model.values.id, 'DELETE');
            window.location.reload();
        }
        dataTableRecordsOptions.cm.model.values = initModelValues();
    };
  
    const recordsTable = await __webpack_require__.e(/* import() */ 1).then(__webpack_require__.bind(null, 10));
    await recordsTable.default(dataTableRecordsOptions);

    /**
     * Unprocessed images table
     */
    const fileAttributes = [];
    fileAttributes.push(mutils.createVariableDefinition('file_name', t`File name`, 'text'));
    fileAttributes.push(mutils.createVariableDefinition('uid', t`Uploaded by`, 'table_reference','_users'));
    fileAttributes.push(mutils.createVariableDefinition('record_created', t`Uploaded on`, 'timestamp'));
    fileAttributes.push(mutils.createVariableDefinition('photos', 'file_hash', 'jsonb'));

    const fileTableRecordsOptions = await mutils.generalTableRecordsOptions($fileTable, '__unprocessed', fileAttributes); //there is no add or edit record posibility so we choose a dummy name for this table because it won't be binded directly to a database table

    fileTableRecordsOptions.tableOptions = {
        hideColumns: ['photos'],
        scrollY: 'calc(50vh - 300px)'
    }

    fileTableRecordsOptions.btn_batch_import = false;
    fileTableRecordsOptions.btn_add_record = false;
    fileTableRecordsOptions.skipId = true;

    fileTableRecordsOptions.processTableData = (row, inx) => {

        row.photos = [row.file_hash];
        row.photos.map(photo => {
            row[photo] = true;
        });
        return row;
    };

    fileTableRecordsOptions.onTableCreated = (_table) => fileTable = _table;

    fileTableRecordsOptions.changeRecordSet = (_changeRecordSet) => {
        changeFileTableRecordSetFunction = _changeRecordSet;
        changeFileTableRecordSetFunction([]);
    }

    fileTableRecordsOptions.cm = new ComponentManager.default();

    fileTableRecordsOptions.disableEdit = true;

    fileTableRecordsOptions.externalEditRecord = row => {
        dataTable && dataTable.__editRecord && dataTable.__editRecord();
    }
  
    await recordsTable.default(fileTableRecordsOptions);

    /**
     * Media scroller
     */

    mediaScroller = new MediaScroller.default({
        fetch: (offset, scope = '/') => {
            const __filter = mutils.prepareFilter(dataFilter.val());    //this is needed to escape doublequotes because I am sending a batch request in the following step
            return scope === '/processed' ? mutils.batchRequestHelper(['mb2data/ct_vw' + __filter,'mb2data/ct_view_file_properties']) : mutils.requestHelper(_app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].apiRoot + '/uploaded-files' + mediaRootFolder +'/' + (offset || 0) + scope + __filter);
        },
        mediaRoot: _app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].mediaRoot + mediaRootFolder,
        onMediaSelected: onMediaSelected,
        onMediaSelectionChanged: onMediaSelectionChanged,
        onDataFetched: (data, added) => {
            if (!imageTypeSelector.val()) {
                info.val({'processed': `<b>${t`Number of images`}:</b> ${added.length}`});
                changeTableRecordSetFunction && changeTableRecordSetFunction(data[0]);
            }
            else {
                info.val({'processed': `<b>${t`Number of images`}:</b> ${data.length}`});
                changeFileTableRecordSetFunction && changeFileTableRecordSetFunction(data);
            }
        }
    });

    $mediaScroller.append(mediaScroller.$el());

    imageTypeSelector.val(0);

    //////////////////////
 
    function onMediaSelected(mediaData) {
        map = Map.leafletPreview(map, $map, _app_globals__WEBPACK_IMPORTED_MODULE_1__[/* default */ "a"].mediaRoot + mediaRootFolder + mutils.filePath(mediaData.currentPhotoHash || mediaData.file_hash), mediaData.properties);
    }

    function onMediaSelectionChanged() {
        let currentTableCmp = !imageTypeSelector.val() ? dataTable : fileTable;
        !imageTypeSelector.val() ? $fileTable.hide() && $table.show() : $table.hide() && $fileTable.show();
        selectedMedia = mediaScroller.val();
        console.log('selectedMedia', selectedMedia)
        if (imageTypeSelector.val()) {  //unprocessed images
            for (const hash of selectedMedia){
               if (processedImages[hash]) {
                    currentTableCmp = dataTable;
                    $fileTable.hide();
                    $table.show();
                    break;
               }
            };
        }

        //if (selectedMedia.length === 0) return;
        
        const photosColumnIndex = currentTableCmp.getColumnsMap()['photos'];
        //search the selected images in the table
        currentTableCmp.table
        .columns( photosColumnIndex )
        .search( selectedMedia.join('|'), true )
        .draw();

        info.val({'selected': `<b>${t`Number of selected images`}:</b> ${selectedMedia.length}`});
    }

    function onFileUploaded(fileData, $el) {
        $el.find('.btn.btn-danger.delete').hide();
        mediaScroller.appendImages([fileData], false);
        const cm = fileTableRecordsOptions.cm;
        const data = cm.getData('table');
        data.push(fileData);
        cm.refresh('table');
        info.val({'processed': `<b>${t`Number of unprocessed images`}:</b> ${Object.keys(mediaScroller.images).length}`});
    }

    function onInitRecord(cm, modal) {
        const photos = cm.get('photos');
        photos.$el().find('button.btn-default').remove();   //remove add image btn
        const selectedPhotos = cm.model.values && cm.model.values.id ? cm.model.values.photos : mediaScroller.val();
        photos.val(selectedPhotos);

        groupCmp = new Inputs.Input({
            type:'checkbox',
            label: t`Group images`
        });

        groupCmp.val(true);

        groupCmp.$el().find('.checkbox:first').css('margin-right', '10px').css('display','inline');

        selectedPhotos.length < 2 && groupCmp.$el().hide();

        modal.$footer.append(groupCmp.$el());
    }

    function onEditRecord(cm, row) {
        if (row === undefined) {
            if (mediaScroller.val().length === 0) {
                alert(t`No photo(s) selected. You have to select at least one photo to add a record to.`);
                return false;
            }
        }
        return true;
    }

    function onImageListAction(item) {
        if (['load_processed', 'clear', 'load_unprocessed', 'deselect'].indexOf(item.key) !== -1) {
            
            mediaScroller.action(item.key);
        }
    }
});

/***/ })

}]);